import{_ as o,c,a as n,d as p,w as e,r as l,o as i,e as t}from"./app-yZ_05sAe.js";const u={};function r(k,s){const a=l("font");return i(),c("div",null,[s[4]||(s[4]=n(`<h1 id="kafka精讲" tabindex="-1"><a class="header-anchor" href="#kafka精讲"><span>Kafka精讲</span></a></h1><h2 id="什么是kafak" tabindex="-1"><a class="header-anchor" href="#什么是kafak"><span>什么是Kafak</span></a></h2><p>Apache Kafak是一个开源分布式事件流平台，被数千家公司用于高性能数据管道、流分析、数据集成和关键任务应用程序。</p><h3 id="kafak的起源" tabindex="-1"><a class="header-anchor" href="#kafak的起源"><span>Kafak的起源</span></a></h3><p>Kafak最初由LinkedIn（全球最大的面向职场人士的社交网站）设计开发的，是为了解决LinkedIn的数据管道问题，用于LinkedIn网站的活动数据和运营数据处理工具；</p><ul><li>活动流数据：页面访问量、被查看页面内容方面的信息以及搜索情况等内容；</li><li>运营数据：服务器的性能数据(CPU、IO使用率、请求事件、服务日志等数据)；</li></ul><p>刚开始LinkedIn采用ActiveMQ来进行数据交换，大约在2010年前后，那时的ActiveMQ还远远无法满足LinkedIn对数据交换的需求，经常由于各种缺陷导致消息阻塞或者服务无法正常访问，为了解决这个问题，LinkedIn决定研发自己的消息传递系统，当时LinkedIn的首席架构是jay Krep便开始组织团队进行消息传递系统的研发；</p><p>Kafak的名称的来源与jay Krep非常喜欢的一位作家Franz Kfaka（弗兰茨·卡夫卡）。</p><h3 id="kafak的发展历程" tabindex="-1"><a class="header-anchor" href="#kafak的发展历程"><span>Kafak的发展历程</span></a></h3><ol><li>2010年底 ，Kafak在Github上开源，初始版本为0.70；</li><li>2011年7月，因为备受关注，被纳入Apache孵化器项目；</li><li>2012年12月，Kafka从Apache的孵化器项目毕业，成为Apache顶级项目；</li><li>2014年，jay Kreps离开了LinkedIn公司，成立从confluent公司，此后LinkedIn和confluent成为Kafak核心代码贡献组织，致力于Kafak的版本迭代升级和推广应用；</li></ol><h2 id="kafka运行环境的前置要求" tabindex="-1"><a class="header-anchor" href="#kafka运行环境的前置要求"><span>Kafka运行环境的前置要求</span></a></h2><p>Kafka是Scala语言编写而成，Scala运行在Java虚拟机上，并兼容现有的Java程序，因此部署Kafka的时候，需要先安装JDk环境。</p><p>Kafka的安装一共有三种方式：</p><ul><li><p>使用Kafka + ZooKeeper的方式安装</p><p>1️⃣使用内置的ZooKeeper</p><p>2️⃣使用外部的ZooKeeper</p></li><li><p>使用Kafka + KRaft 的方式安装</p></li></ul><p>以上的三种方式都是独立部署的方式，本文不着重讲解。本文主要在对Kafka的特性进行分析，所以采用了更为方便和快捷的Docker部署方式。</p><h3 id="使用kraft的方式安装kafka" tabindex="-1"><a class="header-anchor" href="#使用kraft的方式安装kafka"><span>使用KRaft的方式安装Kafka</span></a></h3><p>从Kafka的<a href="https://kafka.apache.org/downloads" target="_blank" rel="noopener noreferrer">官方下载界面</a>中下载对应版本的Kafka，本文下载的Kafka版本为：<code>kafka_2.13-3.7.0</code>。</p><p>1️⃣将Kafka解压到指定的文件夹</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token function">tar</span> <span class="token parameter variable">-zxvf</span> kafka_2.13-3.7.0.tgz <span class="token parameter variable">-C</span> /opt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>解压完毕后Kafka的目录结构为：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token punctuation">[</span>root@localhost kafka_2.13-3.7.0<span class="token punctuation">]</span><span class="token comment"># ll</span></span>
<span class="line">total <span class="token number">68</span></span>
<span class="line">drwxr-xr-x. <span class="token number">3</span> root root  <span class="token number">4096</span> Feb  <span class="token number">9</span>  <span class="token number">2024</span> bin</span>
<span class="line">drwxr-xr-x. <span class="token number">3</span> root root  <span class="token number">4096</span> Feb  <span class="token number">9</span>  <span class="token number">2024</span> config</span>
<span class="line">drwxr-xr-x. <span class="token number">2</span> root root  <span class="token number">8192</span> Mar <span class="token number">20</span> <span class="token number">21</span>:25 libs</span>
<span class="line">-rw-r--r--. <span class="token number">1</span> root root <span class="token number">15125</span> Feb  <span class="token number">9</span>  <span class="token number">2024</span> LICENSE</span>
<span class="line">drwxr-xr-x. <span class="token number">2</span> root root  <span class="token number">4096</span> Feb  <span class="token number">9</span>  <span class="token number">2024</span> licenses</span>
<span class="line">-rw-r--r--. <span class="token number">1</span> root root <span class="token number">28359</span> Feb  <span class="token number">9</span>  <span class="token number">2024</span> NOTICE</span>
<span class="line">drwxr-xr-x. <span class="token number">2</span> root root    <span class="token number">44</span> Feb  <span class="token number">9</span>  <span class="token number">2024</span> site-docs</span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2️⃣使用bin文件夹下的<code>kafka-stroage.sh random-uuid</code>生成一个唯一的集群标识</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token punctuation">[</span>root@localhost bin<span class="token punctuation">]</span><span class="token comment"># ./kafka-storage.sh random-uuid</span></span>
<span class="line">dXvbzB15S0GM04pGO6qMEQ</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>3️⃣使用<code>kafka-storage.sh </code> 对Kafak的数据进行格式化</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token punctuation">[</span>root<span class="token annotation punctuation">@localhost</span> bin<span class="token punctuation">]</span># <span class="token punctuation">.</span>/kafka<span class="token operator">-</span>storage<span class="token punctuation">.</span>sh format <span class="token operator">-</span>t dXvbzB15S0GM04pGO6qMEQ <span class="token operator">-</span>c <span class="token punctuation">.</span><span class="token punctuation">.</span>/config<span class="token operator">/</span>kraft<span class="token operator">/</span>server<span class="token punctuation">.</span>properties </span>
<span class="line">metaPropertiesEnsemble<span class="token operator">=</span><span class="token class-name">MetaPropertiesEnsemble</span><span class="token punctuation">(</span>metadataLogDir<span class="token operator">=</span><span class="token class-name">Optional</span><span class="token punctuation">.</span>empty<span class="token punctuation">,</span> dirs<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">/</span>tmp<span class="token operator">/</span>kraft<span class="token operator">-</span>combined<span class="token operator">-</span>logs<span class="token operator">:</span> <span class="token constant">EMPTY</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token class-name">Formatting</span> <span class="token operator">/</span>tmp<span class="token operator">/</span>kraft<span class="token operator">-</span>combined<span class="token operator">-</span>logs <span class="token keyword">with</span> <span class="token namespace">metadata<span class="token punctuation">.</span>version</span> <span class="token number">3.7</span><span class="token operator">-</span><span class="token constant">IV4</span><span class="token punctuation">.</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4️⃣启动Kafka服务</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token punctuation">[</span>root@localhost bin<span class="token punctuation">]</span><span class="token comment"># ./kafka-server-start.sh -daemon ../config/kraft/server.properties </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>可以使用<code>ps -ef|grep kafka</code>查看Kafka的进程号，然后查看Kafka占用的端口号：</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token punctuation">[</span>root@localhost bin<span class="token punctuation">]</span><span class="token comment"># netstat -nlpt|grep 3350</span></span>
<span class="line">tcp6       <span class="token number">0</span>      <span class="token number">0</span> :::9092                 :::*                    LISTEN      <span class="token number">3350</span>/java           </span>
<span class="line">tcp6       <span class="token number">0</span>      <span class="token number">0</span> :::9093                 :::*                    LISTEN      <span class="token number">3350</span>/java           </span>
<span class="line">tcp6       <span class="token number">0</span>      <span class="token number">0</span> :::41994                :::*                    LISTEN      <span class="token number">3350</span>/java </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Kafka占用了三个端口号，其中9092和9093是固定端口号（可以在server.properties文件中修改），另外一个端口号不是固定端口号，每次启动都可能是不同的。</p><h3 id="docker安装kafka" tabindex="-1"><a class="header-anchor" href="#docker安装kafka"><span>Docker安装Kafka</span></a></h3><p>查看Docker的安装版本，本文采用Docker 26.1.3的版本来进行演示。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token punctuation">[</span>root@VM-4-14-centos ~<span class="token punctuation">]</span><span class="token comment"># docker -v</span></span>
<span class="line">Docker version <span class="token number">26.1</span>.3, build b72abbb</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>1️⃣从Docker拉取Kafka镜像</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token punctuation">[</span>root@VM-4-14-centos ~<span class="token punctuation">]</span><span class="token comment"># docker pull apache/kafka:3.7.0</span></span>
<span class="line"><span class="token number">3.7</span>.0: Pulling from apache/kafka</span>
<span class="line">4abcf2066143: Pull complete </span>
<span class="line">59648cfc069f: Pull complete </span>
<span class="line">c35c9fa25004: Pull complete </span>
<span class="line">6d5007388037: Pull complete </span>
<span class="line">6c757a5f69f5: Pull complete </span>
<span class="line">09ca680417ab: Pull complete </span>
<span class="line">4df4bfcb1169: Pull complete </span>
<span class="line">a21b4a66a69f: Pull complete </span>
<span class="line">57ed40b10aab: Pull complete </span>
<span class="line">ba4e34b28ce8: Pull complete </span>
<span class="line">Digest: sha256:41c20d65b0a2180b9deca056d47540771752e69fe9225d5748dd65a25a9675d7</span>
<span class="line">Status: Downloaded newer image <span class="token keyword">for</span> apache/kafka:3.7.0</span>
<span class="line">docker.io/apache/kafka:3.7.0</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2️⃣启动Kafka容器，并将Kafka的配置文件映射出来</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token punctuation">[</span>root@VM-4-14-centos kafka<span class="token punctuation">]</span><span class="token comment"># docker run -d -v /opt/docker/kafka:/mnt/shared/config -p 9092:9092 apache/kafka:3.7.0</span></span>
<span class="line">ac8aa0633448a77d814b3f4794f1f457b87c153f79442207e94d0abd8fbe78fa</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>3️⃣如果需要设置允许外部连接，需要修改映射出来的server.properties文件中的两项配置</p><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties"><pre><code><span class="line"><span class="token comment"># 设置Kafka的监听地址（默认是localhost，因为是Docker容器，每次启动的IP都是不同的，所以直接配置成0.0.0.0）</span></span>
<span class="line"><span class="token key attr-name">listeners</span><span class="token punctuation">=</span><span class="token value attr-value">PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093</span></span>
<span class="line"><span class="token comment"># 设置Kafka对外暴露的地址（默认为localhost，填写成宿主机的实际IP地址即可）</span></span>
<span class="line"><span class="token key attr-name">advertised.listeners</span><span class="token punctuation">=</span><span class="token value attr-value">PLAINTEXT://192.168.188.129:9092</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="kafka的简单操作" tabindex="-1"><a class="header-anchor" href="#kafka的简单操作"><span>Kafka的简单操作</span></a></h2><h3 id="kafka主题操作" tabindex="-1"><a class="header-anchor" href="#kafka主题操作"><span>Kafka主题操作</span></a></h3><p>使用Kafka之前，第一件事情就是创建一个<strong>主题（Topic）</strong>，主题类似于文件系统中的一个文件夹，用于存储Kafka中的事件。</p><p>**事件（Event）**也称之为记录或者消息，比如支付交易、手机地理位置更新、运输订单、物联网设备或者医疗设备的传感器测量数据等等都是事件。</p><p>Event和Topic的关系类似于文件夹和文件之间的关系，Topic是文件夹，而Event是存储在文件夹中的文件。</p><p>关于主题的操作都需要通过<code>kafka-topic.sh</code>来指定，其中可以通过<code>kafka-topic.sh --help</code>的方式来获取该使用方式，其中<code>–bootstrap-server</code>表示要连接到哪个Kafka的Broker上进行操作，是<em>必填参数</em>。</p><h4 id="【示例】-创建一个主题​​" tabindex="-1"><a class="header-anchor" href="#【示例】-创建一个主题​​"><span>⭐【示例】：创建一个主题​​</span></a></h4><p>通过<code>--create --topic hello</code>来创建一个名为hello的主题。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token punctuation">[</span>root@localhost bin<span class="token punctuation">]</span><span class="token comment"># ./kafka-topics.sh --create --topic hello --bootstrap-server localhost:9092</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token number">2025</span>-03-20 <span class="token number">21</span>:51:30,034<span class="token punctuation">]</span> INFO <span class="token punctuation">[</span>ReplicaFetcherManager on broker <span class="token number">1</span><span class="token punctuation">]</span> Removed fetcher <span class="token keyword">for</span> partitions Set<span class="token punctuation">(</span>hello-0<span class="token punctuation">)</span> <span class="token punctuation">(</span>kafka.server.ReplicaFetcherManager<span class="token punctuation">)</span></span>
<span class="line">Created topic hello.</span>
<span class="line"><span class="token punctuation">[</span><span class="token number">2025</span>-03-20 <span class="token number">21</span>:51:30,072<span class="token punctuation">]</span> INFO <span class="token punctuation">[</span>LogLoader <span class="token assign-left variable">partition</span><span class="token operator">=</span>hello-0, <span class="token assign-left variable">dir</span><span class="token operator">=</span>/tmp/kraft-combined-logs<span class="token punctuation">]</span> Loading producer state till offset <span class="token number">0</span> with message <span class="token function">format</span> version <span class="token number">2</span> <span class="token punctuation">(</span>kafka.log.UnifiedLog$<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token number">2025</span>-03-20 <span class="token number">21</span>:51:30,074<span class="token punctuation">]</span> INFO Created log <span class="token keyword">for</span> partition hello-0 <span class="token keyword">in</span> /tmp/kraft-combined-logs/hello-0 with properties <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">(</span>kafka.log.LogManager<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token number">2025</span>-03-20 <span class="token number">21</span>:51:30,074<span class="token punctuation">]</span> INFO <span class="token punctuation">[</span>Partition hello-0 <span class="token assign-left variable">broker</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">]</span> No checkpointed highwatermark is found <span class="token keyword">for</span> partition hello-0 <span class="token punctuation">(</span>kafka.cluster.Partition<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token number">2025</span>-03-20 <span class="token number">21</span>:51:30,075<span class="token punctuation">]</span> INFO <span class="token punctuation">[</span>Partition hello-0 <span class="token assign-left variable">broker</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">]</span> Log loaded <span class="token keyword">for</span> partition hello-0 with initial high watermark <span class="token number">0</span> <span class="token punctuation">(</span>kafka.cluster.Partition<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="【示例】-列出所有主题" tabindex="-1"><a class="header-anchor" href="#【示例】-列出所有主题"><span>⭐【示例】：列出所有主题</span></a></h4><p>通过<code>–list</code>参数列出所有的主题；</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token punctuation">[</span>root@localhost bin<span class="token punctuation">]</span><span class="token comment"># ./kafka-topics.sh --bootstrap-server localhost:9092 --list</span></span>
<span class="line">hello</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="【示例】-删除主题" tabindex="-1"><a class="header-anchor" href="#【示例】-删除主题"><span>⭐【示例】：删除主题</span></a></h4><p>通过<code>--delete --topic hello</code>参数删除一个名为hello的主题；</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token punctuation">[</span>root@localhost bin<span class="token punctuation">]</span><span class="token comment"># ./kafka-topics.sh --bootstrap-server localhost:9092 --delete --topic hello</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token number">2025</span>-03-20 <span class="token number">21</span>:55:20,068<span class="token punctuation">]</span> INFO <span class="token punctuation">[</span>ReplicaFetcherManager on broker <span class="token number">1</span><span class="token punctuation">]</span> Removed fetcher <span class="token keyword">for</span> partitions Set<span class="token punctuation">(</span>hello-0<span class="token punctuation">)</span> <span class="token punctuation">(</span>kafka.server.ReplicaFetcherManager<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token number">2025</span>-03-20 <span class="token number">21</span>:55:20,068<span class="token punctuation">]</span> INFO <span class="token punctuation">[</span>ReplicaAlterLogDirsManager on broker <span class="token number">1</span><span class="token punctuation">]</span> Removed fetcher <span class="token keyword">for</span> partitions Set<span class="token punctuation">(</span>hello-0<span class="token punctuation">)</span> <span class="token punctuation">(</span>kafka.server.ReplicaAlterLogDirsManager<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token number">2025</span>-03-20 <span class="token number">21</span>:55:20,079<span class="token punctuation">]</span> INFO Log <span class="token keyword">for</span> partition hello-0 is renamed to /tmp/kraft-combined-logs/hello-0.598ea4d0a45248bb8194da2acf5aa770-delete and is scheduled <span class="token keyword">for</span> deletion <span class="token punctuation">(</span>kafka.log.LogManager<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token number">2025</span>-03-20 <span class="token number">21</span>:55:20,085<span class="token punctuation">]</span> INFO <span class="token punctuation">[</span>GroupCoordinator <span class="token number">1</span><span class="token punctuation">]</span>: Removed <span class="token number">0</span> offsets associated with deleted partitions: hello-0. <span class="token punctuation">(</span>kafka.coordinator.group.GroupCoordinator<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token number">2025</span>-03-20 <span class="token number">21</span>:55:20,098<span class="token punctuation">]</span> INFO <span class="token punctuation">[</span>DynamicConfigPublisher broker <span class="token assign-left variable">id</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">]</span> Updating topic hello with new configuration <span class="token builtin class-name">:</span>  <span class="token punctuation">(</span>kafka.server.metadata.DynamicConfigPublisher<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span>root@localhost bin<span class="token punctuation">]</span><span class="token comment"># ./kafka-topics.sh --bootstrap-server localhost:9092 --list</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="【示例】-显示主题的详细信息" tabindex="-1"><a class="header-anchor" href="#【示例】-显示主题的详细信息"><span>⭐【示例】：显示主题的详细信息</span></a></h4><p>通过<code>--describle --topic hello</code>来显示一个名为hello的主题的详细信息。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token punctuation">[</span>root@localhost bin<span class="token punctuation">]</span><span class="token comment"># ./kafka-topics.sh --bootstrap-server localhost:9092 --describe --topic hello</span></span>
<span class="line">Topic: hello	TopicId: 6UIJ9ryrTMClVwvfTJs7rQ	PartitionCount: <span class="token number">1</span>	ReplicationFactor: <span class="token number">1</span>	Configs: <span class="token assign-left variable">segment.bytes</span><span class="token operator">=</span><span class="token number">1073741824</span></span>
<span class="line">	Topic: hello	Partition: <span class="token number">0</span>	Leader: <span class="token number">1</span>	Replicas: <span class="token number">1</span>	Isr: <span class="token number">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="【示例】-修改主题的信息" tabindex="-1"><a class="header-anchor" href="#【示例】-修改主题的信息"><span>⭐【示例】：修改主题的信息</span></a></h4><p>通过<code>–-alert --topic hello --partition 3</code>来修改一个名为hello的主题的分区数量为3。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token punctuation">[</span>root<span class="token annotation punctuation">@localhost</span> bin<span class="token punctuation">]</span># <span class="token punctuation">.</span>/kafka<span class="token operator">-</span>topics<span class="token punctuation">.</span>sh <span class="token operator">--</span>bootstrap<span class="token operator">-</span>server localhost<span class="token operator">:</span><span class="token number">9092</span> <span class="token operator">--</span>alter <span class="token operator">--</span>topic hello <span class="token operator">--</span>partitions <span class="token number">3</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token number">2025</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">20</span> <span class="token number">22</span><span class="token operator">:</span><span class="token number">06</span><span class="token operator">:</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">281</span><span class="token punctuation">]</span> <span class="token constant">INFO</span> <span class="token punctuation">[</span><span class="token class-name">ReplicaFetcherManager</span> on broker <span class="token number">1</span><span class="token punctuation">]</span> <span class="token class-name">Removed</span> fetcher <span class="token keyword">for</span> partitions <span class="token class-name">Set</span><span class="token punctuation">(</span>hello<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> hello<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">kafka<span class="token punctuation">.</span>server<span class="token punctuation">.</span></span>ReplicaFetcherManager</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token number">2025</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">20</span> <span class="token number">22</span><span class="token operator">:</span><span class="token number">06</span><span class="token operator">:</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">285</span><span class="token punctuation">]</span> <span class="token constant">INFO</span> <span class="token punctuation">[</span><span class="token class-name">LogLoader</span> partition<span class="token operator">=</span>hello<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> dir<span class="token operator">=</span><span class="token operator">/</span>tmp<span class="token operator">/</span>kraft<span class="token operator">-</span>combined<span class="token operator">-</span>logs<span class="token punctuation">]</span> <span class="token class-name">Loading</span> producer state till offset <span class="token number">0</span> <span class="token keyword">with</span> <span class="token namespace">message</span> format version <span class="token number">2</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">kafka<span class="token punctuation">.</span>log<span class="token punctuation">.</span></span>UnifiedLog</span>$<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token number">2025</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">20</span> <span class="token number">22</span><span class="token operator">:</span><span class="token number">06</span><span class="token operator">:</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">285</span><span class="token punctuation">]</span> <span class="token constant">INFO</span> <span class="token class-name">Created</span> log <span class="token keyword">for</span> partition hello<span class="token operator">-</span><span class="token number">2</span> in <span class="token operator">/</span>tmp<span class="token operator">/</span>kraft<span class="token operator">-</span>combined<span class="token operator">-</span>logs<span class="token operator">/</span>hello<span class="token operator">-</span><span class="token number">2</span> <span class="token keyword">with</span> <span class="token namespace">properties</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">kafka<span class="token punctuation">.</span>log<span class="token punctuation">.</span></span>LogManager</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token number">2025</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">20</span> <span class="token number">22</span><span class="token operator">:</span><span class="token number">06</span><span class="token operator">:</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">285</span><span class="token punctuation">]</span> <span class="token constant">INFO</span> <span class="token punctuation">[</span><span class="token class-name">Partition</span> hello<span class="token operator">-</span><span class="token number">2</span> broker<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token class-name">No</span> checkpointed highwatermark is found <span class="token keyword">for</span> partition hello<span class="token operator">-</span><span class="token number">2</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">kafka<span class="token punctuation">.</span>cluster<span class="token punctuation">.</span></span>Partition</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token number">2025</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">20</span> <span class="token number">22</span><span class="token operator">:</span><span class="token number">06</span><span class="token operator">:</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">285</span><span class="token punctuation">]</span> <span class="token constant">INFO</span> <span class="token punctuation">[</span><span class="token class-name">Partition</span> hello<span class="token operator">-</span><span class="token number">2</span> broker<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token class-name">Log</span> loaded <span class="token keyword">for</span> partition hello<span class="token operator">-</span><span class="token number">2</span> <span class="token keyword">with</span> <span class="token namespace">initial</span> high watermark <span class="token number">0</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">kafka<span class="token punctuation">.</span>cluster<span class="token punctuation">.</span></span>Partition</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token number">2025</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">20</span> <span class="token number">22</span><span class="token operator">:</span><span class="token number">06</span><span class="token operator">:</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">301</span><span class="token punctuation">]</span> <span class="token constant">INFO</span> <span class="token punctuation">[</span><span class="token class-name">LogLoader</span> partition<span class="token operator">=</span>hello<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> dir<span class="token operator">=</span><span class="token operator">/</span>tmp<span class="token operator">/</span>kraft<span class="token operator">-</span>combined<span class="token operator">-</span>logs<span class="token punctuation">]</span> <span class="token class-name">Loading</span> producer state till offset <span class="token number">0</span> <span class="token keyword">with</span> <span class="token namespace">message</span> format version <span class="token number">2</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">kafka<span class="token punctuation">.</span>log<span class="token punctuation">.</span></span>UnifiedLog</span>$<span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token number">2025</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">20</span> <span class="token number">22</span><span class="token operator">:</span><span class="token number">06</span><span class="token operator">:</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">301</span><span class="token punctuation">]</span> <span class="token constant">INFO</span> <span class="token class-name">Created</span> log <span class="token keyword">for</span> partition hello<span class="token operator">-</span><span class="token number">1</span> in <span class="token operator">/</span>tmp<span class="token operator">/</span>kraft<span class="token operator">-</span>combined<span class="token operator">-</span>logs<span class="token operator">/</span>hello<span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">with</span> <span class="token namespace">properties</span> <span class="token punctuation">{</span><span class="token punctuation">}</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">kafka<span class="token punctuation">.</span>log<span class="token punctuation">.</span></span>LogManager</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token number">2025</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">20</span> <span class="token number">22</span><span class="token operator">:</span><span class="token number">06</span><span class="token operator">:</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">301</span><span class="token punctuation">]</span> <span class="token constant">INFO</span> <span class="token punctuation">[</span><span class="token class-name">Partition</span> hello<span class="token operator">-</span><span class="token number">1</span> broker<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token class-name">No</span> checkpointed highwatermark is found <span class="token keyword">for</span> partition hello<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">kafka<span class="token punctuation">.</span>cluster<span class="token punctuation">.</span></span>Partition</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token punctuation">[</span><span class="token number">2025</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">20</span> <span class="token number">22</span><span class="token operator">:</span><span class="token number">06</span><span class="token operator">:</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">301</span><span class="token punctuation">]</span> <span class="token constant">INFO</span> <span class="token punctuation">[</span><span class="token class-name">Partition</span> hello<span class="token operator">-</span><span class="token number">1</span> broker<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token class-name">Log</span> loaded <span class="token keyword">for</span> partition hello<span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">with</span> <span class="token namespace">initial</span> high watermark <span class="token number">0</span> <span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">kafka<span class="token punctuation">.</span>cluster<span class="token punctuation">.</span></span>Partition</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时再查看Topic的详情，就可以观察到Kafka的hello主题的分区数量已经从1变成了3。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token punctuation">[</span>root<span class="token annotation punctuation">@localhost</span> bin<span class="token punctuation">]</span># <span class="token punctuation">.</span>/kafka<span class="token operator">-</span>topics<span class="token punctuation">.</span>sh <span class="token operator">--</span>bootstrap<span class="token operator">-</span>server localhost<span class="token operator">:</span><span class="token number">9092</span> <span class="token operator">--</span>describe <span class="token operator">--</span>topic hello</span>
<span class="line"><span class="token class-name">Topic</span><span class="token operator">:</span> hello	<span class="token class-name">TopicId</span><span class="token operator">:</span> <span class="token number">6</span>UIJ9ryrTMClVwvfTJs7rQ	<span class="token class-name">PartitionCount</span><span class="token operator">:</span> <span class="token number">3</span>	<span class="token class-name">ReplicationFactor</span><span class="token operator">:</span> <span class="token number">1</span>	<span class="token class-name">Configs</span><span class="token operator">:</span> segment<span class="token punctuation">.</span>bytes<span class="token operator">=</span><span class="token number">1073741824</span></span>
<span class="line">	<span class="token class-name">Topic</span><span class="token operator">:</span> hello	<span class="token class-name">Partition</span><span class="token operator">:</span> <span class="token number">0</span>	<span class="token class-name">Leader</span><span class="token operator">:</span> <span class="token number">1</span>	<span class="token class-name">Replicas</span><span class="token operator">:</span> <span class="token number">1</span>	<span class="token class-name">Isr</span><span class="token operator">:</span> <span class="token number">1</span></span>
<span class="line">	<span class="token class-name">Topic</span><span class="token operator">:</span> hello	<span class="token class-name">Partition</span><span class="token operator">:</span> <span class="token number">1</span>	<span class="token class-name">Leader</span><span class="token operator">:</span> <span class="token number">1</span>	<span class="token class-name">Replicas</span><span class="token operator">:</span> <span class="token number">1</span>	<span class="token class-name">Isr</span><span class="token operator">:</span> <span class="token number">1</span></span>
<span class="line">	<span class="token class-name">Topic</span><span class="token operator">:</span> hello	<span class="token class-name">Partition</span><span class="token operator">:</span> <span class="token number">2</span>	<span class="token class-name">Leader</span><span class="token operator">:</span> <span class="token number">1</span>	<span class="token class-name">Replicas</span><span class="token operator">:</span> <span class="token number">1</span>	<span class="token class-name">Isr</span><span class="token operator">:</span> <span class="token number">1</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>依然可以通过<code>--alter --topic</code>来修改主题的其他属性</p></blockquote><h3 id="kafka操作消息" tabindex="-1"><a class="header-anchor" href="#kafka操作消息"><span>Kafka操作消息</span></a></h3><p>Kafka客户端通过网络与Kafka Brokers进行通信，可以写或读主题Topic中的消息。Kafka Brokers一旦收到消息，就会将消息以持计划化的方式存储起来。</p><p>1️⃣通过<code>kafka-console-producer.sh</code>可以向主题中发送消息，不带任何参数的时候可以列出该脚本的使用方式。其中，</p><ul><li><code>--bootstrap-server</code> —— 表示要操作的Broker的地址，是必填参数</li><li><code>--topic</code> —— 表示要操作的Topic的名称，是必填参数</li></ul><p>2️⃣通过<code>kafka-console-consumer.sh</code>可以从主题中读取消息，不带任何参数的时候可以列出该脚本的使用方式。其中，</p><ul><li><code>--bootstrap-server</code> —— 表示要操作的Broker的地址，是必填参数</li><li><code>--topic</code> —— 表示要操作的Topic的名称，是必填参数</li></ul><h4 id="【示例】-向kafka发送消息" tabindex="-1"><a class="header-anchor" href="#【示例】-向kafka发送消息"><span>⭐【示例】：向Kafka发送消息</span></a></h4><p>可以使用<code>Ctrl+C</code>停止向主题发送消息；</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token punctuation">[</span>root@localhost bin<span class="token punctuation">]</span><span class="token comment"># ./kafka-console-producer.sh --bootstrap-server localhost:9092 --topic hello</span></span>
<span class="line"><span class="token operator">&gt;</span>hello</span>
<span class="line"><span class="token operator">&gt;</span>hello world</span>
<span class="line"><span class="token operator">&gt;</span>^C<span class="token punctuation">[</span>root@localhost bin<span class="token punctuation">]</span><span class="token comment"># </span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="【示例】-从kafka读取消息" tabindex="-1"><a class="header-anchor" href="#【示例】-从kafka读取消息"><span>⭐【示例】：从Kafka读取消息</span></a></h4><p>使用<code>--from-beginning</code>表示从主题的第一条消息开始读取,不带该参数表示读取最新的消息。</p><p>使用<code>Ctrl+C</code>退出读取消息。</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line"><span class="token punctuation">[</span>root@localhost bin<span class="token punctuation">]</span><span class="token comment"># ./kafka-console-consumer.sh --bootstrap-server localhost:9092 --topic hello --from-beginning</span></span>
<span class="line">hello</span>
<span class="line">hello workd</span>
<span class="line">^CProcessed a total of <span class="token number">2</span> messages</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><span alt="solid">消息是被持久化存储在Kafka中的，他可以被任意多次的读取到</span>。</p><p>上述示例中，我们再次启动Kafka的消费它，他仍然可以读取上面的消息。<span alt="wavy">当kafka的消息启动的时候，它处于一种被监听的状态</span>，他会一直监听Kafka生产者发送的消息的。</p><h2 id="安装使用kafka-egle监控软件" tabindex="-1"><a class="header-anchor" href="#安装使用kafka-egle监控软件"><span>安装使用Kafka-Egle监控软件</span></a></h2><p><a href="https://docs.kafka-eagle.org/1.introduction/1.whatisefak" target="_blank" rel="noopener noreferrer">EFAK（Apache Kafka的Egle）</a>是开源可视化和管理软件，它可以查询、可视化、预警和监控指标，简而言之，就是Kafka集群数据可视化工具。</p><p>在官网下载到EFAK的安装包后，上传到服务器：</p><p>1️⃣解压安装包</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line">tar <span class="token operator">-</span>zxvf kafka<span class="token operator">-</span>egle<span class="token operator">-</span>bin<span class="token operator">-</span><span class="token number">3.0</span><span class="token number">.1</span><span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz <span class="token operator">-</span><span class="token class-name">C</span> <span class="token operator">/</span>opt</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2️⃣解压Web服务</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line">tar <span class="token operator">-</span>zxvf efak<span class="token operator">-</span>web<span class="token operator">-</span><span class="token number">3.0</span><span class="token number">.1</span><span class="token punctuation">.</span>tar<span class="token punctuation">.</span>gz </span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>3️⃣修改Web的配置信息</p><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties"><pre><code><span class="line"><span class="token comment">######################################</span></span>
<span class="line"><span class="token comment"># multi zookeeper &amp; kafka cluster list</span></span>
<span class="line"><span class="token comment"># Settings prefixed with &#39;kafka.eagle.&#39; will be deprecated, use &#39;efak.&#39; instead</span></span>
<span class="line"><span class="token comment">######################################</span></span>
<span class="line"><span class="token key attr-name">efak.zk.cluster.alias</span><span class="token punctuation">=</span><span class="token value attr-value">cluster1</span></span>
<span class="line"><span class="token key attr-name">cluster1.zk.list</span><span class="token punctuation">=</span><span class="token value attr-value">127.0.0.1:2181</span></span>
<span class="line"><span class="token comment">######################################</span></span>
<span class="line"><span class="token comment"># kafka mysql jdbc driver address</span></span>
<span class="line"><span class="token comment">######################################</span></span>
<span class="line"><span class="token key attr-name">efak.driver</span><span class="token punctuation">=</span><span class="token value attr-value">com.mysql.cj.jdbc.Driver</span></span>
<span class="line"><span class="token key attr-name">efak.url</span><span class="token punctuation">=</span><span class="token value attr-value">jdbc:mysql://127.0.0.1:3307/ke?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull</span></span>
<span class="line"><span class="token key attr-name">efak.username</span><span class="token punctuation">=</span><span class="token value attr-value">root</span></span>
<span class="line"><span class="token key attr-name">efak.password</span><span class="token punctuation">=</span><span class="token value attr-value">RootCC123@</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>主要需要修改的配置项分为两项：</p><ul><li>ZooKeeper集群的配置信息</li><li>MySQL的配置信息</li></ul><blockquote><p>EFAK需要创建一个名称为ke的数据库，然后它<span alt="solid">仅支持连接依赖于Zookeeper启动的Kafka集群</span>。</p></blockquote><p>4️⃣启动EFAK的服务</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token punctuation">.</span>/bin<span class="token operator">/</span>ke<span class="token punctuation">.</span>sh start</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>5️⃣停止EFAL的服务</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token punctuation">.</span>/bin<span class="token operator">/</span>ke<span class="token punctuation">.</span>sh stop</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>6️⃣查看EFAK服务的运行状态</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token punctuation">.</span>/bin<span class="token operator">/</span>ke<span class="token punctuation">.</span>sh status</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>启动之后再http://127.0.0.1:8048就可以访问EFAK的服务，如下图所示：</p><p><img src="https://typora-panhao.oss-cn-hangzhou.aliyuncs.com/image-20250323170434337.png" alt="image-20250323170434337"></p><h2 id="springboot集成kafka" tabindex="-1"><a class="header-anchor" href="#springboot集成kafka"><span>SpringBoot集成Kafka</span></a></h2><h3 id="引入依赖" tabindex="-1"><a class="header-anchor" href="#引入依赖"><span>引入依赖</span></a></h3><p>通常可以使用以下依赖：</p><div class="language-xml line-numbers-mode" data-highlighter="prismjs" data-ext="xml"><pre><code><span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.springframework.kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>spring-kafka<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span></span>
<span class="line">        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>也有使用<code>spring-boot-starter-kafka</code>的，但是其实最终都是依赖于<code>kafka-client</code>，所以使用哪种都是大差不差，本文主要采用<code>spring-kafka</code>依赖来进行演示。</p><h3 id="生产者和消费者配置" tabindex="-1"><a class="header-anchor" href="#生产者和消费者配置"><span>生产者和消费者配置</span></a></h3><p>在Spring Boot项目中，可以在<code>application.properties</code>文件中对Kafka的生产者和消费者进行配置，如下所示：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">kafka</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># Kafka服务器的地址</span></span>
<span class="line">    <span class="token key atrule">bootstrap-servers</span><span class="token punctuation">:</span> 192.168.188.2<span class="token punctuation">:</span><span class="token number">9092</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中关于生产者和消费者的配置项比较多，更多的配置项可以参考<code>org.springframework.boot.autoconfigure.kafka.KafkaProperties</code>类，如下图所示为所有的生产者和消费者的可配置项：</p><p><img src="https://typora-panhao.oss-cn-hangzhou.aliyuncs.com/image-20250323171831868.png" alt="image-20250323171831868"></p><h4 id="生产者写入数据" tabindex="-1"><a class="header-anchor" href="#生产者写入数据"><span>生产者写入数据</span></a></h4><p>在我们引入了spring-kafka依赖后，Spring Boot会根据配置文件进行自动装配，通过Bean的<code>KafkaTemplate</code>来进行Kafak消息的发送；</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EventProducer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment">// 加入了spring-kafka依赖  + 配置文件的信息，SpringBoot 会自动装配Kafka，并且可以自动注入KafkaTemplate</span></span>
<span class="line">    <span class="token annotation punctuation">@Resource</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">KafkaTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> kafkaTemplate<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> topic<span class="token punctuation">,</span> <span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>参考RedisTemplate的用法，甚至连序列化和反序列化的逻辑都类似</p></blockquote><h4 id="消费者读取数据" tabindex="-1"><a class="header-anchor" href="#消费者读取数据"><span>消费者读取数据</span></a></h4><p>在我们引入了spring-kafka依赖后，Spring Boot提供了<code>@KafkaListener</code>来启动一个线程通过不断的轮询的方式来获取Kafka中的消息。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token annotation punctuation">@Component</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EventConsumer</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token string">&quot;hello-topic&quot;</span><span class="token punctuation">,</span>groupId <span class="token operator">=</span> <span class="token string">&quot;group-01&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> event<span class="token punctuation">)</span><span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中topics参数指定了该消费者监听的主题列表，groupId参数指定了消费者所属消费者组Id，<em>这两个参数都是必填参数</em>。</p><p>此时启动SpringBoot服务，然后利用生产者生产消息，在消费者就会打印接受打消息。</p><h3 id="kafka核心概念" tabindex="-1"><a class="header-anchor" href="#kafka核心概念"><span>Kafka核心概念</span></a></h3><h4 id="整体架构" tabindex="-1"><a class="header-anchor" href="#整体架构"><span>整体架构</span></a></h4><p>首先Kafka消息队列由三个角色组成：</p><ul><li>生产者 —— 负责向消息队列中投递消息；</li><li>Kafka集群 —— 由多台Kafka Server组成，每个Server称为一个Broker；</li><li>消费者 —— 负责从消息队列中拉取消息；</li></ul><p>其中Kafka的集群需要采用Zookeeper进行管理，但是在Kafka2.8.0版本之后支持通过KRAFT的方式启动，可以不再需要通过Zookeeper来管理集群。</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/56566e2a21f14cea8c3c2afeda79b755~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt=""></p><h4 id="主题和分区" tabindex="-1"><a class="header-anchor" href="#主题和分区"><span>主题和分区</span></a></h4><p>每个消息都有一个类别，这个类别就称之为<strong>主题（Topic）</strong>，在物理逻辑上一个Topic可以简单理解为一个Queue。当生产者向该Queue中投递了一个消息时，所有订阅了该Topic的消费者都可以收到这条消息。</p><p>为了提高并行能力，Kafka为每个Topic维护了多个<strong>分区（Partition）</strong>，每个分区中的消息保证ID唯一其有序，新的消息不断的追加到尾部。<span alt="solid">Kafka只能保证消息在一个分区内的消息有序，不能保证Topic的不同分区之间消息的有序性</span>。</p><p>为了提高容错能力，每个分区可以建立多个<strong>副本（Replica）</strong>，一个Topic的多个分区的多副本会分布在多个Broker上，这样即使某个Broker节点发生了宕机，也不影响数据存储的完整性。为了提高消息读写的效率，Kafka会通过选举机制在多个副本中选取一个副本作为主副本（Leader），而且其它的副本则称为从副本（Follwer）。<span alt="solid">所有的消息读写都是在主副本中进行的，其它副本只会从主副本中复制数据</span>。</p><p>Kafka根据每个分区内数据的复制进度，在Zookeeper中为每一个Topic维护了一个ISR（in-sync replica），用于记录已经完成数据同步的副本集。如果主分区不可用，Kafka救护自从ISR集合中选择一个副本作为新的主分区。</p><h4 id="消费者组" tabindex="-1"><a class="header-anchor" href="#消费者组"><span>消费者组</span></a></h4><p>消费者按照**消费者组（Group）**的形式来消费消息，消费者组与消费者之间的关系如下：</p><ol><li>一个或者多个消费者组成一个消费者组，一个消费者只属于一个消费者组;</li><li>属于一个消费者中内的消费者共同消费一个Topic的消息；</li><li>一个消费者可以消费一个Topic内的一个或多个Partition，但是一个Partition只会被Group内的一个Consumer消费。</li><li>一个Topic可以被多个Group消费，且多个Group之间的消费互不影响，Kafka会为每个Group维护一个消费的记录；</li></ol><p><img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/4fa728d8d537483c917d0193bb9777d6~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt=""></p><h2 id="kafka进阶使用" tabindex="-1"><a class="header-anchor" href="#kafka进阶使用"><span>Kafka进阶使用</span></a></h2><h3 id="消费者从头开始消费" tabindex="-1"><a class="header-anchor" href="#消费者从头开始消费"><span>消费者从头开始消费</span></a></h3><p>默认情况下，当启动一个新的消费者组时，它会从分区的最新偏移量（即分区中最后一条消息的下一个位置）开始消息。如果希望从第一条消息开始消费，需要将消费者的<code>auto.offset.reset</code>设置为<code>earliest</code>，配置方式如下：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">kafka</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">bootstrap-servers</span><span class="token punctuation">:</span> 124.222.91.208<span class="token punctuation">:</span><span class="token number">9093</span></span>
<span class="line">    <span class="token key atrule">consumer</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">auto-offset-reset</span><span class="token punctuation">:</span> earliest</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>它一共有3个配置项：</p><ul><li>earliest —— 当各分区下有已提交的offset时，从提交的offset开始消费；无提交的offset时，从头开始消费；</li><li>none —— 当各个分区下有已提交的offset时，从提交的offset开始消费；只要有一个分区不存在已提交的offset，则抛出异常；</li><li>latest —— 当各个分区下有已提交的offset时，从提交的offset开始消费；无提交offset时，消费新产生到该分区的消息；</li></ul><p>如果当前分区下已有提交的offset时，也希望从头开始消费有两种方式：</p><ol><li>修改消费者组的唯一标识 —— 作为新的消费者组来进行消费；</li><li>通过Kafka提供的脚本手动修改重置偏移量；</li></ol><p>第一种方式太过简单，只需要修改注解中配置的groupId即可，这里演示下如何通过Kafka提供的脚本来手动重置偏移量。</p><p>⭐【使用Kafka脚本重置偏移量】</p><div class="language-bash line-numbers-mode" data-highlighter="prismjs" data-ext="sh"><pre><code><span class="line">./kafka-consumer-groups.sh --bootstrap-server localhost:9092 <span class="token parameter variable">--group</span> groupName1 <span class="token parameter variable">--topic</span> hello-topic --reset-offsets --to-earliest <span class="token parameter variable">--execute</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>其中:</p><ul><li><code>--bootstrap-server</code> —— 表示Kafka服务器的地址；</li><li><code>--group</code> —— 表示要操作的消费者组的唯一标识；</li><li><code>--topic</code> —— 表示要操作的主题的唯一标识；</li><li><code>--reset-offsets</code> —— 表示要执行的操作是重置偏移量；</li><li><code>--to-earliest</code> —— 表示需要需要reset-offsets选项设置为earliest。同理如果需要修改latest，可以使用<code>--to-latest</code>选项来替换。</li><li><code>--execute</code> —— 表示执行该命令。</li></ul><blockquote><p>执行该脚本的时候，该消费者组的消费者必须都处于非活跃状态。对于代码而言，就是需要关闭消费</p></blockquote><h3 id="生产者发送消息的方式" tabindex="-1"><a class="header-anchor" href="#生产者发送消息的方式"><span>生产者发送消息的方式</span></a></h3><h4 id="生产者发送字符串消息" tabindex="-1"><a class="header-anchor" href="#生产者发送字符串消息"><span>生产者发送字符串消息</span></a></h4><p>⭐【示例】指定主题和消费内容发送消息</p><div class="language-Java line-numbers-mode" data-highlighter="prismjs" data-ext="Java"><pre><code><span class="line">    public void sendMessage(String message){</span>
<span class="line">        kafkaTemplate.send(&quot;mall-topic&quot;,message);</span>
<span class="line">    }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⭐【示例】使用<code>Message</code> 对象发送消息</p><p>该方法的源码如下</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token doc-comment comment">/**</span>
<span class="line">   * Send a message with routing information in message headers. The message payload</span>
<span class="line">   * may be converted before sending.</span>
<span class="line">   * <span class="token keyword">@param</span> <span class="token parameter">message</span> the message to send.</span>
<span class="line">   * <span class="token keyword">@return</span> a Future for the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">SendResult</span></span><span class="token punctuation">}</span>.</span>
<span class="line">   * <span class="token keyword">@see</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">KafkaHeaders</span><span class="token punctuation">#</span><span class="token field">TOPIC</span></span> 可以在请求头中设置Topic</span>
<span class="line">   * <span class="token keyword">@see</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">KafkaHeaders</span><span class="token punctuation">#</span><span class="token field">PARTITION</span></span> 可以在请求头中设置Partition</span>
<span class="line">   * <span class="token keyword">@see</span> <span class="token reference"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>kafka<span class="token punctuation">.</span>support<span class="token punctuation">.</span></span><span class="token class-name">KafkaHeaders</span><span class="token punctuation">#</span><span class="token field">KEY</span></span> 可以在请求头中设置Key</span>
<span class="line">   */</span></span>
<span class="line">  <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SendResult</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">Message</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据上面的描述发送消息：</p><div class="language-Java line-numbers-mode" data-highlighter="prismjs" data-ext="Java"><pre><code><span class="line">	public void sendMessage(String message) {</span>
<span class="line">        Message&lt;String&gt; build = MessageBuilder.withPayload(message)</span>
<span class="line">                .setHeader(KafkaHeaders.TOPIC, &quot;hello-topic&quot;) // 在头部设置Topic信息</span>
<span class="line">                .build();</span>
<span class="line">        kafkaTemplate.send(build);</span>
<span class="line">    }</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>⭐【示例】使用<code>ProducerRecord&lt;T&gt;</code> 来发送消息</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage2</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> record <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token string">&quot;hello-topic&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">&quot;key&quot;</span><span class="token punctuation">,</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中ProducerRecord一共有以下几个属性：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">String</span> topic<span class="token punctuation">;</span> <span class="token comment">// 主题名称</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Integer</span> partition<span class="token punctuation">;</span> <span class="token comment">// 分区</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Headers</span> headers<span class="token punctuation">;</span> <span class="token comment">// 头部信息</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">K</span> key<span class="token punctuation">;</span> <span class="token comment">// 键</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">V</span> value<span class="token punctuation">;</span> <span class="token comment">// 值</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">Long</span> timestamp<span class="token punctuation">;</span> <span class="token comment">// 时间戳</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>使用ProducerRecord需要构造一个ProducerRecord对象，需要为每条消息设置对应的属性，其中：</p><blockquote><p><code>parition</code>属性为<code>null</code>的时候，则由Kafka自动为消费分配一个分区；</p></blockquote><p>⭐【示例】使用默认主题来发送消息</p><p>默认主题发送消息使用<code>kafkaTemplate</code>中的<code>sendDefault</code>方法，它的重载一共有以下几种形式：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line">	<span class="token class-name">ListenableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SendResult</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">sendDefault</span><span class="token punctuation">(</span><span class="token class-name">V</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token doc-comment comment">/**</span>
<span class="line">	 * Send the data to the default topic with the provided key and no partition.</span>
<span class="line">	 * <span class="token keyword">@param</span> <span class="token parameter">key</span> the key.</span>
<span class="line">	 * <span class="token keyword">@param</span> <span class="token parameter">data</span> The data.</span>
<span class="line">	 * <span class="token keyword">@return</span> a Future for the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">SendResult</span></span><span class="token punctuation">}</span>.</span>
<span class="line">	 */</span></span>
<span class="line">	<span class="token class-name">ListenableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SendResult</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">sendDefault</span><span class="token punctuation">(</span><span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token doc-comment comment">/**</span>
<span class="line">	 * Send the data to the default topic with the provided key and partition.</span>
<span class="line">	 * <span class="token keyword">@param</span> <span class="token parameter">partition</span> the partition.</span>
<span class="line">	 * <span class="token keyword">@param</span> <span class="token parameter">key</span> the key.</span>
<span class="line">	 * <span class="token keyword">@param</span> <span class="token parameter">data</span> the data.</span>
<span class="line">	 * <span class="token keyword">@return</span> a Future for the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">SendResult</span></span><span class="token punctuation">}</span>.</span>
<span class="line">	 */</span></span>
<span class="line">	<span class="token class-name">ListenableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SendResult</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">sendDefault</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> partition<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">	<span class="token doc-comment comment">/**</span>
<span class="line">	 * Send the data to the default topic with the provided key and partition.</span>
<span class="line">	 * <span class="token keyword">@param</span> <span class="token parameter">partition</span> the partition.</span>
<span class="line">	 * <span class="token keyword">@param</span> <span class="token parameter">timestamp</span> the timestamp of the record.</span>
<span class="line">	 * <span class="token keyword">@param</span> <span class="token parameter">key</span> the key.</span>
<span class="line">	 * <span class="token keyword">@param</span> <span class="token parameter">data</span> the data.</span>
<span class="line">	 * <span class="token keyword">@return</span> a Future for the <span class="token punctuation">{</span><span class="token keyword">@link</span> <span class="token reference"><span class="token class-name">SendResult</span></span><span class="token punctuation">}</span>.</span>
<span class="line">	 * <span class="token keyword">@since</span> 1.3</span>
<span class="line">	 */</span></span>
<span class="line">	<span class="token class-name">ListenableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SendResult</span><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">sendDefault</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> partition<span class="token punctuation">,</span> <span class="token class-name">Long</span> timestamp<span class="token punctuation">,</span> <span class="token class-name">K</span> key<span class="token punctuation">,</span> <span class="token class-name">V</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>sendDefault方法与send方法之间的区别在于sendDefault方法<span alt="wavy">不需要指定消息发送到哪个Topic，而由配置文件中的<code>spring.kafka.template.default-topic</code>属性来指定的Topic</span>。</p><blockquote><p>一般来说不常用，更多的使用send方法来发送消息</p></blockquote><h4 id="生产者获取消息发送结果" tabindex="-1"><a class="header-anchor" href="#生产者获取消息发送结果"><span>生产者获取消息发送结果</span></a></h4><p>无论是上面提到的send方法还是sendDefault方法，它发送消息都是<strong>异步发送</strong>的。<span alt="dashed">异步发送带来了性能上的提升，但是导致我们在调用send方法的时候无法知道消息发送是否成功了</span>。</p><p>所有的send方法都返回了一个<code>ListenableFuture</code>对象，它继承了<code>java.util.concurrent.Future</code>接口。可以看下ListenableFuture这个类：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ListenableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token keyword">extends</span> <span class="token class-name">Future</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">addCallback</span><span class="token punctuation">(</span><span class="token class-name">ListenableFutureCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> callback<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">void</span> <span class="token function">addCallback</span><span class="token punctuation">(</span><span class="token class-name">SuccessCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> successCallback<span class="token punctuation">,</span> <span class="token class-name">FailureCallback</span> failureCallback<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">default</span> <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token function">completable</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">CompletableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> completable <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DelegatingCompletableFuture</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">addCallback</span><span class="token punctuation">(</span>completable<span class="token operator">::</span><span class="token function">complete</span><span class="token punctuation">,</span> completable<span class="token operator">::</span><span class="token function">completeExceptionally</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> completable<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中：</p><ul><li><code> void addCallback(ListenableFutureCallback&lt;? super T&gt; callback)</code>为这Future添加一个回调，在该回调中需要实现两个方法onFailure在消息发送失败的时候被调用；onSuccess在消息发送成功的时候被调用；</li><li><code>void addCallback(SuccessCallback&lt;? super T&gt; successCallback, FailureCallback failureCallback)</code>这为Future添加两个回调，在消息发送成功的时候执行successCallback回调，在消息发送失败的时候执行FailureCallback回调。</li></ul><p>当然因为ListenableFuture继承了Future类，所以它也有get()方法可以阻塞式的等待消息发送的结果；</p><p>⭐【示例】阻塞式等待消息发送结果</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ExecutionException</span><span class="token punctuation">,</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ListenableFuture</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SendResult</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> future <span class="token operator">=</span> kafkaTemplate<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;hello-topic-1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;hello&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        future<span class="token punctuation">.</span><span class="token function">addCallback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ListenableFutureCallback</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SendResult</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token annotation punctuation">@Override</span></span>
<span class="line">            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onFailure</span><span class="token punctuation">(</span><span class="token class-name">Throwable</span> ex<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;==========&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 消息发送是失败：{}&quot;</span><span class="token punctuation">,</span> ex<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ex<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">                ex<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">            <span class="token annotation punctuation">@Override</span></span>
<span class="line">            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onSuccess</span><span class="token punctuation">(</span><span class="token class-name">SendResult</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> result<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">                log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;==========&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 消息发送成功：{}&quot;</span><span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            <span class="token punctuation">}</span></span>
<span class="line">        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        future<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;==========&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; 主线程 消息发送成功&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>打印结果：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token number">2025</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">31</span> <span class="token number">22</span><span class="token operator">:</span><span class="token number">43</span><span class="token operator">:</span><span class="token number">19</span> <span class="token punctuation">[</span>main<span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>tiga<span class="token punctuation">.</span>study<span class="token punctuation">.</span></span>AppTest</span> <span class="token operator">-</span> <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;</span> 主线程 消息发送成功</span>
<span class="line"><span class="token number">2025</span><span class="token operator">-</span><span class="token number">03</span><span class="token operator">-</span><span class="token number">31</span> <span class="token number">22</span><span class="token operator">:</span><span class="token number">43</span><span class="token operator">:</span><span class="token number">19</span> <span class="token punctuation">[</span>kafka<span class="token operator">-</span>producer<span class="token operator">-</span>network<span class="token operator">-</span>thread <span class="token operator">|</span> producer<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token constant">INFO</span>  <span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>tiga<span class="token punctuation">.</span>study<span class="token punctuation">.</span></span>AppTest</span> <span class="token operator">-</span> <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;&gt;&gt;</span><span class="token operator">&gt;</span> 消息发送成功：<span class="token class-name">SendResult</span> <span class="token punctuation">[</span>producerRecord<span class="token operator">=</span><span class="token class-name">ProducerRecord</span><span class="token punctuation">(</span>topic<span class="token operator">=</span>hello<span class="token operator">-</span>topic<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> partition<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token class-name">RecordHeaders</span><span class="token punctuation">(</span>headers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> isReadOnly <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">,</span> value<span class="token operator">=</span>hello<span class="token punctuation">,</span> timestamp<span class="token operator">=</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">,</span> recordMetadata<span class="token operator">=</span>hello<span class="token operator">-</span>topic<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span><span class="token number">0</span><span class="token annotation punctuation">@9</span><span class="token punctuation">]</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>通过打印结果可以发现发送消息的时候会被阻塞在<code>future.get()</code>方法，然后等待消息发送完毕后执行添加的回调方法。</p><blockquote><p>有些时候，我们并不需要通过<code>future.get()</code>方法阻塞在这里，只需要等待消息发送完毕后再回调方法中针对发送失败和发送成功进行处理。</p></blockquote><h4 id="生产者发送对象消息" tabindex="-1"><a class="header-anchor" href="#生产者发送对象消息"><span>生产者发送对象消息</span></a></h4><p>在Kafka中生产者发送消息和消费者读取消息，而消息都是通过二进制数据流在网络中进行传输。因此在Kafak中<span alt="solid">允许为Key和Value设置序列化的方式</span>，所以要使用生产者发送对象消息，就需要为Key和Value设置默认的序列化方式。</p><p>首先KafakTemplate是实现了SpringBoot的自动装配，在<code>org.springframework.boot.autoconfigure.kafka.KafkaAutoConfiguration</code>类中可以Kafka自动装配的内容。其中在KafkaTemplate的配置上：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line">	<span class="token annotation punctuation">@Bean</span></span>
<span class="line">	<span class="token annotation punctuation">@ConditionalOnMissingBean</span><span class="token punctuation">(</span><span class="token class-name">KafkaTemplate</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span></span>
<span class="line">	<span class="token keyword">public</span> <span class="token class-name">KafkaTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">kafkaTemplate</span><span class="token punctuation">(</span><span class="token class-name">ProducerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> kafkaProducerFactory<span class="token punctuation">,</span></span>
<span class="line">			<span class="token class-name">ProducerListener</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> kafkaProducerListener<span class="token punctuation">,</span></span>
<span class="line">			<span class="token class-name">ObjectProvider</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">RecordMessageConverter</span><span class="token punctuation">&gt;</span></span> messageConverter<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">		<span class="token class-name">KafkaTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> kafkaTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">KafkaTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span>kafkaProducerFactory<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		messageConverter<span class="token punctuation">.</span><span class="token function">ifUnique</span><span class="token punctuation">(</span>kafkaTemplate<span class="token operator">::</span><span class="token function">setMessageConverter</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		kafkaTemplate<span class="token punctuation">.</span><span class="token function">setProducerListener</span><span class="token punctuation">(</span>kafkaProducerListener<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		kafkaTemplate<span class="token punctuation">.</span><span class="token function">setDefaultTopic</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>properties<span class="token punctuation">.</span><span class="token function">getTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDefaultTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">		<span class="token keyword">return</span> kafkaTemplate<span class="token punctuation">;</span></span>
<span class="line">	<span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>SpringBoot会为我们自动生成一个KafkaTemplate，所以我们要发送对象消息的时候只要在对应的类中注入这个Bean就可以了。</p><p>⭐【示例】使用Kafka发送对象消息</p><p>1️⃣在配置文件中设置序列化的方式；</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">kafka</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># Kafka服务器的地址</span></span>
<span class="line">    <span class="token key atrule">bootstrap-servers</span><span class="token punctuation">:</span> 124.222.91.208<span class="token punctuation">:</span><span class="token number">9093</span></span>
<span class="line">    <span class="token key atrule">producer</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># 设置生产者Key的序列化方式</span></span>
<span class="line">      <span class="token key atrule">key-serializer</span><span class="token punctuation">:</span> org.springframework.kafka.support.serializer.JsonSerializer</span>
<span class="line">    <span class="token comment"># 设置生产者Value的序列化方式</span></span>
<span class="line">      <span class="token key atrule">value-serializer</span><span class="token punctuation">:</span> org.springframework.kafka.support.serializer.ToStringSerializer</span>
<span class="line">    <span class="token key atrule">consumer</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">auto-offset-reset</span><span class="token punctuation">:</span> earliest</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2️⃣注入对应类型的KafkaTemplate并发送消息；</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line">    <span class="token annotation punctuation">@Resource</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">KafkaTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> kafkaTemplate2<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Test</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">id</span><span class="token punctuation">(</span><span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">birth</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        kafkaTemplate2<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">&quot;hello-topic&quot;</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="创建主题并且指定它的分区数量" tabindex="-1"><a class="header-anchor" href="#创建主题并且指定它的分区数量"><span>创建主题并且指定它的分区数量</span></a></h3><p>在Kafka里面有一个很核心的概念就是：<strong>Replica副本</strong>，副本的主要作用是为了实现备份功能。<span alt="solid">在Kafka中一个主题可以有多个分区，每个分区可以有一个或多个副本</span>。通常情况来将，一个分区的多个副本会均匀的分区在该集群内不同的broker上，只要该分区有一个副本仍然处于工作状态，该分区内的数据就不会丢失。</p><p>Replica副本分为Leade Replica和Follwer Replica</p><ul><li>Ledaer Replica：每个分区的多个副本中的“主”副本，生产者发送数据以及消费者消费数据，都是来自Leader副本；</li><li>Follwer Replica：每个分区的多个副本中的“从”副本，实时从Leader副本中同步数据，保持和Leader副本数据的同步，Leader副本发生故障时，会从Follwer Replica中选取一个成为新的Leader Replica。</li></ul>`,193)),p(a,{title:"red"},{default:e(()=>s[0]||(s[0]=[t("副本的数量不允许为0，也不允许大于broker节点的个数，否则将无法创建Topic")])),_:1}),s[5]||(s[5]=n(`<h4 id="创建主题" tabindex="-1"><a class="header-anchor" href="#创建主题"><span>创建主题</span></a></h4><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">NewTopic</span> <span class="token function">helloTopic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 表示创建一个名为hello-topic-2的主题，且它的分区数量为1，每个分区的副本的数量为1</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">NewTopic</span><span class="token punctuation">(</span><span class="token string">&quot;hello-topic-2&quot;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建主题的时候只需要向Spring中注入一个类型为<code>NewTopic</code>的Bean即可，但是有以下注意事项：</p><ol><li>当需要创建多个Topic的时候，每个NewTopic的Bean的名称是不能相同的；</li><li>并不是每次服务启动的时候都去创建一个Topic，而是Topic已存在的情况下才会去创建的；</li><li>如果在两次启动的之间修改了Partition的数量（<em>第二个参数</em>），Partition的数量的变化是从少到多，则Kafka会将该Topic的分区数量修改为第二次启动时设置的分区数量；相反，Partition的数量变化是从多到少，则Kafka不会修改该Topic分区的数量；</li></ol><h3 id="生产者发送消息的分区策略" tabindex="-1"><a class="header-anchor" href="#生产者发送消息的分区策略"><span>生产者发送消息的分区策略</span></a></h3><p>生产者写入消息到主题时，Kafka会一句不同的策略将数据分配到不同的分区中；</p><p>如果我们在<code>kafkaTemplate.send()</code>方法处打上断点，通过Debug来找到最终生成的代码它就是：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token comment">// org.apache.kafka.clients.producer.KafkaProducer#partition    </span></span>
<span class="line">	<span class="token keyword">private</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">&gt;</span></span> record<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> serializedKey<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> serializedValue<span class="token punctuation">,</span> <span class="token class-name">Cluster</span> cluster<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Integer</span> partition <span class="token operator">=</span> record<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> partition <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">?</span></span>
<span class="line">                partition <span class="token operator">:</span></span>
<span class="line">                partitioner<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span></span>
<span class="line">                        record<span class="token punctuation">.</span><span class="token function">topic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> record<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> serializedKey<span class="token punctuation">,</span> record<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> serializedValue<span class="token punctuation">,</span> cluster<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>从上面的代码逻辑很容就看出来：</p><ol><li>如果我们发送的ProducerRecord对象中设置了parition的值，就会将消息发送到指定的分区；</li><li>如果我们发送的ProducerRecord对象中没有设置parition的值，就会利用分区器计算出一个分区；</li></ol><p>如果此时我们继续Debug可以找到这个<code>partitioner</code>的类型为：<code>org.apache.kafka.clients.producer.internals.DefaultPartitioner</code>，在它的源码描述中有这么一段话：</p><blockquote><p>默认分区策略： 1️⃣如果记录中指定了分区，则使用它 2️⃣如果未指定分区但存在key，则根据key的哈希值选择分区 3️⃣如果不存在分区或密钥，则选择在批处理已满时更改的粘性分区。</p></blockquote><p>继续观察该类中的<code>partition()</code>方法，该方法用于计算出需要将消息发送到哪个分区：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token class-name">String</span> topic<span class="token punctuation">,</span> <span class="token class-name">Object</span> key<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyBytes<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> valueBytes<span class="token punctuation">,</span> <span class="token class-name">Cluster</span> cluster<span class="token punctuation">,</span></span>
<span class="line">                         <span class="token keyword">int</span> numPartitions<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span>keyBytes <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token keyword">return</span> stickyPartitionCache<span class="token punctuation">.</span><span class="token function">partition</span><span class="token punctuation">(</span>topic<span class="token punctuation">,</span> cluster<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">        <span class="token comment">// hash the keyBytes to choose a partition</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token class-name">Utils</span><span class="token punctuation">.</span><span class="token function">toPositive</span><span class="token punctuation">(</span><span class="token class-name">Utils</span><span class="token punctuation">.</span><span class="token function">murmur2</span><span class="token punctuation">(</span>keyBytes<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> numPartitions<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>根据上面的代码我们不难看出：</p><ol><li>如果我们在发送消息的时候指定了Key的值，使用该Key值的Hash值对分区的数量进行取余，得到最终该消息会被发送到的分区；</li><li>如果我们在发送消息的时候没有指定Key的值，就是使用黏性分区策略；</li></ol><p><span alt="solid">首先我们需要知道的是Kafka发送消息并非是一条一条的发送，而是一批一批的发送的</span>，同一批的消息会被发送到同一个分区。因此在Kafka中如果某个分区的消息很少，该分区的消息的延迟也会比较高，因为Kafka在发送的消息的时候需要等待该批次的消息满足了一定的条件后，才会将该消息发送到Kafka。</p><hr><p><strong>黏性分区策略的发展历程</strong></p><p>在早期的Kafka2.4之前，消息没有指定分区也没有指定键值的时候采用的轮询策略，第一调用的时候会生成一个随机数，后续每次调用该随机数都会自增，然后使用这个值对partition的数量取模，来得到该消息的分区；轮询策略在消息较少的时候，导致少量的消息被均摊到更多的批次内了，导致每个批次都很难满足发送消息的条件，所以轮询的策略在消息较少的时候会到消息延迟的上升。</p><p>在Kafka2.4之后，消息没有指定分区也没有指定键值的时候采用粘性分区策略。黏性分区的意思就是<span alt="wavy">当来了一批无分区也无键值的消息，先一股脑的将其填充到一个批次内将其发送出去，如果该批次满了，随再选取一个分区，将剩余的消息填充到另外一批次内发送到该分区</span>。</p><p>随机选取分区的规则：</p><ol><li>如果此时可用分区的数量小于1，那么将在<em>所有分区</em>的中随机选择一个分区进行发送；</li><li>如果此时可用分区的数量等于1，那么将消息发送该这个分区；</li><li>如果此时可用分区的数量大于1，那么在<em>可用分区</em>内随机选择一个分区进行发送；</li></ol><hr><h4 id="自定义分区策略" tabindex="-1"><a class="header-anchor" href="#自定义分区策略"><span>自定义分区策略</span></a></h4><p>使用自定义分区策略的时候需要手动来配置KafkaTemplate，然后通过Producer的<code>partitioner.class</code>属性来设置使用的分区策略。</p><p>⭐【示例】自定义KafkaTemplate并使用自定义的分区策略</p><p>1️⃣自定义配置KafkaTemplate</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaConfig</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${spring.kafka.bootstrap-servers}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> bootstrapServers<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${spring.kafka.producer.value-serializer}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> valueSerializer<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${spring.kafka.producer.key-serializer}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> keySerializer<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">KafkaTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">kafkaTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">KafkaTemplate</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token function">producerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">ProducerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">producerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultKafkaProducerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token function">producerConfigs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">producerConfigs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span> bootstrapServers<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">KEY_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> keySerializer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">VALUE_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> valueSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 设置自定义的分区策略</span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">PARTITIONER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">CustonPartioner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> map<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2️⃣创建一个自定义的分区策略</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustonPartioner</span> <span class="token keyword">implements</span> <span class="token class-name">Partitioner</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * Compute the partition for the given record.</span>
<span class="line">     *</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">topic</span>      The topic name</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">key</span>        The key to partition on (or null if no key)</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">keyBytes</span>   The serialized key to partition on( or null if no key)</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">value</span>      The value to partition on or null</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">valueBytes</span> The serialized value to partition on or null</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">cluster</span>    The current cluster metadata</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">partition</span><span class="token punctuation">(</span><span class="token class-name">String</span> topic<span class="token punctuation">,</span> <span class="token class-name">Object</span> key<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> keyBytes<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">,</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> valueBytes<span class="token punctuation">,</span> <span class="token class-name">Cluster</span> cluster<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token comment">// 每次都将消息发送到第一个分区中</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * This is called when partitioner is closed.</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token doc-comment comment">/**</span>
<span class="line">     * Configure this class with the given key-value pairs</span>
<span class="line">     *</span>
<span class="line">     * <span class="token keyword">@param</span> <span class="token parameter">configs</span></span>
<span class="line">     */</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> configs<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时使用我们注入的KafkaTemplate来发送消息的时候，它都会被发送到hello-topic-2主题下的第一个分区。</p><p>总结：<span alt="wavy">要想实现自定义的分区策略，只需要实现Partitioner接口，然后再注入KafkaTemplate的时候配置它即可</span>。</p><h3 id="拦截器" tabindex="-1"><a class="header-anchor" href="#拦截器"><span>拦截器</span></a></h3><p>生产者发送消息的流程如下图所示：</p><p><img src="https://typora-panhao.oss-cn-hangzhou.aliyuncs.com/image-20250408212423775.png" alt="image-20250408212423775"></p><p>其中<strong>拦截器</strong>支持我们在发送消息的时候对消息进行进一步的处理。类似，生产者发送订单数据，而拦截器负责对订单的数据进行汇总计算或者其它形式的处理。</p><p>在Kafka中如果需要自定义拦截器，只需要实现接口：<code>org.apache.kafka.clients.producer.ProducerInterceptor</code>即可。这个拦截器一共有两个方法需要实现：</p><ol><li><code>onSend</code> —— 发送消息时，会先该调用该方法，对消息进行拦截；可以在拦截中对消息做一些处理，记录日志等等操作；</li><li><code>onAcknowledgement</code> —— 服务器发送消息后收到Broker的确认消息时调用该方法</li></ol><p>如下所示为自定义的序列化器：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">ProducerInterceptor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">onSend</span><span class="token punctuation">(</span><span class="token class-name">ProducerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> producerRecord<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onAcknowledgement</span><span class="token punctuation">(</span><span class="token class-name">RecordMetadata</span> recordMetadata<span class="token punctuation">,</span> <span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>创建拦截器后还需要再生产者的配置中配置这个拦截器：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line">    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">producerConfigs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span> bootstrapServers<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">KEY_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> keySerializer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">VALUE_SERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> valueSerializer<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 设置自定义的分区策略</span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">PARTITIONER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">CustonPartioner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 设置拦截器</span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ProducerConfig</span><span class="token punctuation">.</span><span class="token constant">INTERCEPTOR_CLASSES_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">CustomInterceptor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> map<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>在给Producer配置拦截的器的时候，要求INTERCEPTOR_CLASSES_CONFIG配置项的值是逗号分隔的字符串，因为拦截器是可以有多个的；</p></blockquote><h3 id="消费者消费消息的配置" tabindex="-1"><a class="header-anchor" href="#消费者消费消息的配置"><span>消费者消费消息的配置</span></a></h3><p>Kafka消费者通过注解<code>@KafkaListener</code>来订阅主题和监听事件，如下所示为一个消费者监听消费的基础例子：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line">    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token string">&quot;hello-topic-2&quot;</span><span class="token punctuation">,</span> groupId <span class="token operator">=</span> <span class="token string">&quot;helloGroup&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Payload</span> <span class="token class-name">String</span> message<span class="token punctuation">,</span></span>
<span class="line">                          <span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">KafkaHeaders</span><span class="token punctuation">.</span><span class="token constant">RECEIVED_TOPIC</span><span class="token punctuation">)</span> <span class="token class-name">String</span> topic<span class="token punctuation">,</span></span>
<span class="line">                          <span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">KafkaHeaders</span><span class="token punctuation">.</span><span class="token constant">RECEIVED_PARTITION_ID</span><span class="token punctuation">)</span> <span class="token class-name">String</span> partition<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;读取到事件：&quot;</span> <span class="token operator">+</span> message <span class="token operator">+</span> <span class="token string">&quot;, Topic: &quot;</span> <span class="token operator">+</span> topic <span class="token operator">+</span> <span class="token string">&quot;, Partition: &quot;</span> <span class="token operator">+</span> partition<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中：</p><ol><li><code>@Payload</code>注解表示将消息的负载放入到指定的属性类；</li><li><code>@Header</code>注解表示要从接受到的消息的Header中提取指定键对应的值；</li></ol><h4 id="使用consumerrecord来接受消息" tabindex="-1"><a class="header-anchor" href="#使用consumerrecord来接受消息"><span>使用ConsumerRecord来接受消息</span></a></h4><p>依旧使用上面的例子，在方法的参数列表中新增一个<code>ConsumerRecord</code>类型的参数，如下所示：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line">    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token string">&quot;hello-topic-2&quot;</span><span class="token punctuation">,</span> groupId <span class="token operator">=</span> <span class="token string">&quot;helloGroup&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Payload</span> <span class="token class-name">String</span> message<span class="token punctuation">,</span></span>
<span class="line">                          <span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">KafkaHeaders</span><span class="token punctuation">.</span><span class="token constant">RECEIVED_TOPIC</span><span class="token punctuation">)</span> <span class="token class-name">String</span> topic<span class="token punctuation">,</span></span>
<span class="line">                          <span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">KafkaHeaders</span><span class="token punctuation">.</span><span class="token constant">RECEIVED_PARTITION_ID</span><span class="token punctuation">)</span> <span class="token class-name">String</span> partition<span class="token punctuation">,</span></span>
<span class="line">                          <span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;读取到事件：&quot;</span> <span class="token operator">+</span> message <span class="token operator">+</span> <span class="token string">&quot;, Topic: &quot;</span> <span class="token operator">+</span> topic <span class="token operator">+</span> <span class="token string">&quot;, Partition: &quot;</span> <span class="token operator">+</span> partition<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时我们接受到生产者发送的消息后打印这个record的内容如下：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token class-name">ConsumerRecord</span><span class="token punctuation">(</span>topic <span class="token operator">=</span> hello<span class="token operator">-</span>topic<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> partition <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> leaderEpoch <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> offset <span class="token operator">=</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token class-name">CreateTime</span> <span class="token operator">=</span> <span class="token number">1744120102381</span><span class="token punctuation">,</span> serialized key size <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> serialized value size <span class="token operator">=</span> <span class="token number">46</span><span class="token punctuation">,</span> headers <span class="token operator">=</span> <span class="token class-name">RecordHeaders</span><span class="token punctuation">(</span>headers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> isReadOnly <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span> value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;id&quot;</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">&quot;name&quot;</span><span class="token operator">:</span><span class="token string">&quot;张三&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;birth&quot;</span><span class="token operator">:</span><span class="token number">1743603653538</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>可以看到在record中包含了很多的内容，其中有Topic信息、Parition信息还有Offset等等信息。</p><blockquote><p>在record参数前面添加@Payload注解也是没有问题的，依然是可以正常获取到生产者发送的消息；</p></blockquote><h4 id="使用对象接受消息" tabindex="-1"><a class="header-anchor" href="#使用对象接受消息"><span>使用对象接受消息</span></a></h4><p>在使用对象接受消息的时候其实是与生产者发送对象消息时类似的都需要去配置序列化的方式的，只不过在消费者这边需要配置的是：<strong>反序列化方式</strong></p><p>如下为配置反序列化方式：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">application</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">name</span><span class="token punctuation">:</span> study<span class="token punctuation">-</span>kafka</span>
<span class="line">  <span class="token key atrule">kafka</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token comment"># Kafka服务器的地址</span></span>
<span class="line">    <span class="token key atrule">bootstrap-servers</span><span class="token punctuation">:</span> 124.222.91.208<span class="token punctuation">:</span><span class="token number">9093</span></span>
<span class="line">    <span class="token key atrule">producer</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">value-serializer</span><span class="token punctuation">:</span> org.springframework.kafka.support.serializer.JsonSerializer</span>
<span class="line">      <span class="token key atrule">key-serializer</span><span class="token punctuation">:</span> org.springframework.kafka.support.serializer.ToStringSerializer</span>
<span class="line">    <span class="token key atrule">consumer</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">auto-offset-reset</span><span class="token punctuation">:</span> latest</span>
<span class="line">      <span class="token key atrule">key-deserializer</span><span class="token punctuation">:</span> org.apache.kafka.common.serialization.StringDeserializer</span>
<span class="line">      <span class="token key atrule">value-deserializer</span><span class="token punctuation">:</span> org.springframework.kafka.support.serializer.JsonDeserializer</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要额外注意的是：<span alt="dashed">生产者的序列化方式与消费者的反序列化方式之间是一一对应的，否则就会序列化失败</span>。</p><p>然后使用对接接受消息即可：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line">    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token string">&quot;hello-topic-2&quot;</span><span class="token punctuation">,</span> groupId <span class="token operator">=</span> <span class="token string">&quot;helloGroup&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">,</span></span>
<span class="line">                          <span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">KafkaHeaders</span><span class="token punctuation">.</span><span class="token constant">RECEIVED_TOPIC</span><span class="token punctuation">)</span> <span class="token class-name">String</span> topic<span class="token punctuation">,</span></span>
<span class="line">                          <span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">KafkaHeaders</span><span class="token punctuation">.</span><span class="token constant">RECEIVED_PARTITION_ID</span><span class="token punctuation">)</span> <span class="token class-name">String</span> partition<span class="token punctuation">,</span></span>
<span class="line">                          <span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;读取到事件：&quot;</span> <span class="token operator">+</span> user <span class="token operator">+</span> <span class="token string">&quot;, Topic: &quot;</span> <span class="token operator">+</span> topic <span class="token operator">+</span> <span class="token string">&quot;, Partition: &quot;</span> <span class="token operator">+</span> partition<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>需要注意的是，生产者发送的消息如果是无法反序列化为指定的对象，就会出现异常报错提示的。</p><blockquote><p>如果User对象中存在多个属性，但是并不是所有的属性都有存在的可能，则需要为所有的可能性都设置对应的构造方法；</p></blockquote><p><span alt="solid">按照上述的方式来配置的话，启动消费者接受到消息后会报错：<code>trust package</code></span>，这是因为Kafka为了安全考虑仅支持反序列化<code>java.lang</code>和<code>java.util</code>包下的类，但是支持用户设置trust package，设置的方式为：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line"><span class="token key atrule">spring</span><span class="token punctuation">:</span></span>
<span class="line">	<span class="token key atrule">kafka</span><span class="token punctuation">:</span></span>
<span class="line">		<span class="token key atrule">consumer</span><span class="token punctuation">:</span></span>
<span class="line">         	<span class="token key atrule">properties</span><span class="token punctuation">:</span></span>
<span class="line">	        	<span class="token key atrule">spring.json.trusted.packages</span><span class="token punctuation">:</span> <span class="token string">&quot;org.graduate.service.Entity&quot;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="使用占位符设置订阅的主题" tabindex="-1"><a class="header-anchor" href="#使用占位符设置订阅的主题"><span>使用占位符设置订阅的主题</span></a></h4><p>在@KafkaListener中topics属性和groupId都支持通过占位符的方式来设置它的值。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line">    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token string">&quot;\${kafka.topic.name}&quot;</span><span class="token punctuation">,</span> groupId <span class="token operator">=</span> <span class="token string">&quot;\${kafka.topic.consumer.group-id}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> user<span class="token punctuation">,</span></span>
<span class="line">                          <span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">KafkaHeaders</span><span class="token punctuation">.</span><span class="token constant">RECEIVED_TOPIC</span><span class="token punctuation">)</span> <span class="token class-name">String</span> topic<span class="token punctuation">,</span></span>
<span class="line">                          <span class="token annotation punctuation">@Header</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token class-name">KafkaHeaders</span><span class="token punctuation">.</span><span class="token constant">RECEIVED_PARTITION_ID</span><span class="token punctuation">)</span> <span class="token class-name">String</span> partition<span class="token punctuation">,</span></span>
<span class="line">                          <span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;读取到事件：&quot;</span> <span class="token operator">+</span> user <span class="token operator">+</span> <span class="token string">&quot;, Topic: &quot;</span> <span class="token operator">+</span> topic <span class="token operator">+</span> <span class="token string">&quot;, Partition: &quot;</span> <span class="token operator">+</span> partition<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们使用这种方式来获取到的设置它需要订阅的主题和所属群组时，需要在配置文件中设置对应属性的值：</p><div class="language-yaml line-numbers-mode" data-highlighter="prismjs" data-ext="yml"><pre><code><span class="line"><span class="token key atrule">kafka</span><span class="token punctuation">:</span></span>
<span class="line">  <span class="token key atrule">topic</span><span class="token punctuation">:</span></span>
<span class="line">    <span class="token key atrule">name</span><span class="token punctuation">:</span> hello<span class="token punctuation">-</span>topic<span class="token punctuation">-</span><span class="token number">2</span></span>
<span class="line">    <span class="token key atrule">consumer</span><span class="token punctuation">:</span></span>
<span class="line">      <span class="token key atrule">group-id</span><span class="token punctuation">:</span> helloGroup</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这种方式设置消费者与上面的方式是一致的。</p><blockquote><p>当有配置中心的时候，有些时候我可以动态的修改它订阅的主题信息；</p></blockquote><h4 id="手动确认消息" tabindex="-1"><a class="header-anchor" href="#手动确认消息"><span>手动确认消息</span></a></h4><p>首先在开启服务器的手动确认机制：</p><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties"><pre><code><span class="line"><span class="token key attr-name">spring.kafka.listener.ack-model</span><span class="token punctuation">=</span><span class="token value attr-value">manual</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后在监听器的方法参数中添加一个<code>org.springframework.kafka.support.Acknowledgment</code>类型的参数即可。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line">    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token string">&quot;\${kafka.topic.name}&quot;</span><span class="token punctuation">,</span> groupId <span class="token operator">=</span> <span class="token string">&quot;\${kafka.topic.consumer.group-id}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> record<span class="token punctuation">,</span> <span class="token class-name">Acknowledgment</span> ack<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 消息确认</span></span>
<span class="line">        ack<span class="token punctuation">.</span><span class="token function">acknowledge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>如果在消费消息的时候没有手动确认，那么<span alt="solid">该消息仍然会被重新消费</span>。</p><blockquote><p>在Kafka中一个Topic中的一个分区只会被一个消费者组的一个消费者消费，所以及时这个消费这个没有手动确认消息，这个消息也不会发送给其它的消费。只有当该群组内的消费者出现再均衡的时候，该分区被分配给了其它的消费者，其它的消费者才会重复消费这条消息。</p></blockquote><p>默认情况下，Kafka消费者消费消息后自动发确认信息给Kafka的服务器，表示消费已被成功消费。但在某些场景下，我们希望消息处理成功后再发送确认，或在消息处理失败时不发送去人，以便Kafka能够重新发送该消息。</p><h4 id="指定主题、分区和offset消费消息" tabindex="-1"><a class="header-anchor" href="#指定主题、分区和offset消费消息"><span>指定主题、分区和offset消费消息</span></a></h4><p>通过<code>@KafkaListener</code>注解中的<code>@TopicPartition</code>注解来进行指定：</p><ol><li>topic用于指定要消费的主题，同样使用使用SpringEL表达式来配置；</li><li>partitions用于指定要消费的主题；</li><li>partitionsOffsets用于指定要消费的分区，且每次从哪个offset开始消费；</li></ol><p>如下所示：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line">    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topicPartitions <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">            <span class="token annotation punctuation">@TopicPartition</span><span class="token punctuation">(</span>topic <span class="token operator">=</span> <span class="token string">&quot;\${kafka.topic.name}&quot;</span><span class="token punctuation">,</span> partitions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> partitionOffsets <span class="token operator">=</span> <span class="token punctuation">{</span></span>
<span class="line">                    <span class="token annotation punctuation">@PartitionOffset</span><span class="token punctuation">(</span>partition <span class="token operator">=</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">,</span> initialOffset <span class="token operator">=</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span></span>
<span class="line">                    <span class="token annotation punctuation">@PartitionOffset</span><span class="token punctuation">(</span>partition <span class="token operator">=</span> <span class="token string">&quot;4&quot;</span><span class="token punctuation">,</span> initialOffset <span class="token operator">=</span> <span class="token string">&quot;4&quot;</span><span class="token punctuation">)</span></span>
<span class="line">            <span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token punctuation">}</span><span class="token punctuation">,</span> groupId <span class="token operator">=</span> <span class="token string">&quot;\${kafka.topic.consumer.group-id}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Consumer接受到消息：&quot;</span> <span class="token operator">+</span> record<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>上述消费者代码的消费现象为;</p><ol><li>向分区0或者分区1中发送消息，能够被该消费者消费到，且重启消费者后仍然接着上次的消费记录进行消费；</li><li>向分区3或分区4中发送消息，能够被消费者消费到，且重启消费者后分区3中offset大于等于3的消息会被重新消费，同理分区4中offset中大于等于4的消息会被重新消费。</li><li>向分区2中发送消息，则不会给改消费者消费；</li></ol>`,89)),p(a,{title:"red"},{default:e(()=>s[1]||(s[1]=[t("当使用@TopicPartition注解来订阅主题的时候，对应的消费者则不属于任何一个群组，及时使用groupId指定了消费者也是无效的")])),_:1}),s[6]||(s[6]=n(`<p>在Kafka中消费者订阅消息分为两种类型<code>assign</code>和<code>subscribe</code>两种模式。assign称之为分配模式，subscribe称之为订阅模式。</p><ul><li>使用topics属性是订阅模式</li><li>使用topicPartitions属性是分配模式</li></ul><p>在分配模式中，每个消费者都是独立的消费者，它们不属于任何一个消费者群组。</p><p>1️⃣当我们在代码中同事使用了订阅模式和分配模式：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line">    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token string">&quot;\${kafka.topic.name}&quot;</span><span class="token punctuation">,</span> groupId <span class="token operator">=</span> <span class="token string">&quot;helloGroup-1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage2</span><span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Consumer2接受到消息：&quot;</span> <span class="token operator">+</span> record<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topicPartitions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@TopicPartition</span><span class="token punctuation">(</span>topic <span class="token operator">=</span> <span class="token string">&quot;\${kafka.topic.name}&quot;</span><span class="token punctuation">,</span> partitions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> groupId <span class="token operator">=</span> <span class="token string">&quot;helloGroup-1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Consumer1接受到消息：&quot;</span> <span class="token operator">+</span> record<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时消费者1和消费2都可以接受到消息，但是只有消费者2能够提交offset，而消费者1在提交offset的时候则会出现异常。</p><p>2️⃣当我们在代码中使用分配模式，为两个消费者分配相同的分区</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line">    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topicPartitions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@TopicPartition</span><span class="token punctuation">(</span>topic <span class="token operator">=</span> <span class="token string">&quot;\${kafka.topic.name}&quot;</span><span class="token punctuation">,</span> partitions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> groupId <span class="token operator">=</span> <span class="token string">&quot;helloGroup-1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Consumer1接受到消息：&quot;</span> <span class="token operator">+</span> record<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topicPartitions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@TopicPartition</span><span class="token punctuation">(</span>topic <span class="token operator">=</span> <span class="token string">&quot;\${kafka.topic.name}&quot;</span><span class="token punctuation">,</span> partitions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> groupId <span class="token operator">=</span> <span class="token string">&quot;helloGroup-1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage1</span><span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Consumer2接受到消息：&quot;</span> <span class="token operator">+</span> record<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时消费者1和消费2都可以接受到消息，且消费1和消费2都能提交offset；</p><p>3️⃣当我们在代码中使用分配模式，为两个消费者分配部分相同的分区</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line">    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topicPartitions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@TopicPartition</span><span class="token punctuation">(</span>topic <span class="token operator">=</span> <span class="token string">&quot;\${kafka.topic.name}&quot;</span><span class="token punctuation">,</span> partitions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;2&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;3&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> groupId <span class="token operator">=</span> <span class="token string">&quot;helloGroup-1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Consumer1接受到消息：&quot;</span> <span class="token operator">+</span> record<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topicPartitions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token annotation punctuation">@TopicPartition</span><span class="token punctuation">(</span>topic <span class="token operator">=</span> <span class="token string">&quot;\${kafka.topic.name}&quot;</span><span class="token punctuation">,</span> partitions <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;0&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;1&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;4&quot;</span><span class="token punctuation">,</span> <span class="token string">&quot;5&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">,</span> groupId <span class="token operator">=</span> <span class="token string">&quot;helloGroup-1&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage1</span><span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> record<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Consumer2接受到消息：&quot;</span> <span class="token operator">+</span> record<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此时消费者1和消费2都可以接受到分区0和分区1中的消息，但是分区2和分区3中的消息只有消费者1接受到，同理分区4和分区5中的消息也只有消费者2能够接受到。</p><h4 id="消息的批量消费" tabindex="-1"><a class="header-anchor" href="#消息的批量消费"><span>消息的批量消费</span></a></h4><p>1️⃣设置开启消息的批量消费</p><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties"><pre><code><span class="line"><span class="token comment"># 设置监听器的模式为批量模式，可选值有：batch和single</span></span>
<span class="line"><span class="token key attr-name">spring.kafka.listener.model</span><span class="token punctuation">=</span><span class="token value attr-value">batch</span></span>
<span class="line"><span class="token comment"># 设置消费者批次内消息的最大值</span></span>
<span class="line"><span class="token key attr-name">spring.kafka.consumer.max-poll-records</span><span class="token punctuation">=</span><span class="token value attr-value">10</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2️⃣接受消息时使用List来接受</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line">    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token string">&quot;hello-topic-2&quot;</span><span class="token punctuation">,</span> groupId <span class="token operator">=</span> <span class="token string">&quot;helloGroup&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConsumerRecord</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> records<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>records<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当配置了批量消费后，在消费者启动的时候如果Kafka对应的分区内存在大量的未消费的消息，则会一次获取到这个批次（<em>条数由spring.kafka.consumer.max-poll-record属性决定</em>）的消息。</p><p>在消费者启动后，<span alt="solid">每次生产者向该分区发送消息的时候，消费者都立即会收到这个消息</span>，而不是等待满足这个批次数量的消息后再返回。</p>`,19)),p(a,{title:"red"},{default:e(()=>s[2]||(s[2]=[t("当启动批量消费的时候，如果我们接受消息不是用的List或者ConsumerRecords类型，就会出现ConversionFailedException")])),_:1}),s[7]||(s[7]=n(`<blockquote><p>可以使用<code>List&lt;ConsumerRecord&lt;String,Object&gt;&gt;</code>来接受，也可以使用<code>ConsumerRecords&lt;String,Object&gt;</code>来接受</p></blockquote><h4 id="消费者拦截器" tabindex="-1"><a class="header-anchor" href="#消费者拦截器"><span>消费者拦截器</span></a></h4><p>在消息消费之前可以通过配置拦截器对消息进行拦截，在消息被实际处理之前对其进行一些操作，例如记录日志、修改消息内容或者执行一些安全检查。</p><p>1️⃣实现Kafka的<code>ConsumerInterceptor</code>拦截器接口</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CustomConsumerInterceptor</span> <span class="token keyword">implements</span> <span class="token class-name">ConsumerInterceptor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token punctuation">{</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">/*</span>
<span class="line">     * 消费消费前执行</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ConsumerRecords</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">onConsume</span><span class="token punctuation">(</span><span class="token class-name">ConsumerRecords</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> consumerRecords<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消费者消费消息了&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> consumerRecords<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">/*</span>
<span class="line">     * 提交offset的时候执行该方法</span>
<span class="line">     */</span></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onCommit</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TopicPartition</span><span class="token punctuation">,</span> <span class="token class-name">OffsetAndMetadata</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Override</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">configure</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> map<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2️⃣在Kafka消费者的ConsumerFactory配置中注册这个拦截器。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token annotation punctuation">@Configuration</span></span>
<span class="line"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">KafkaConfig</span> <span class="token punctuation">{</span></span>
<span class="line"></span>
<span class="line">    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">&quot;\${spring.kafka.bootstrap-servers}&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">String</span> bootstrapServers<span class="token punctuation">;</span></span>
<span class="line"></span>
<span class="line">    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">consumerConfigs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span> bootstrapServers<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span><span class="token constant">KEY_DESERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span><span class="token constant">VALUE_DESERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 设置拦截器</span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span><span class="token constant">INTERCEPTOR_CLASSES_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">CustomConsumerInterceptor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> map<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line">	</span>
<span class="line">    <span class="token comment">// 设置消费者工厂</span></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">ConsumerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">consumerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DefaultKafkaConsumerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token function">consumerConfigs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment">// 设置监听器容器工厂</span></span>
<span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">KafkaListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">kafkaListenerContainerFactory</span><span class="token punctuation">(</span><span class="token class-name">ConsumerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> consumerFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ConcurrentKafkaListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> listenerContainerFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentKafkaListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        listenerContainerFactory<span class="token punctuation">.</span><span class="token function">setConsumerFactory</span><span class="token punctuation">(</span>consumerFactory<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> listenerContainerFactory<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span>
<span class="line"><span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在设置监听器工厂的时候对于Bean的名称是由讲究的：</p><ul><li>假如我们是按照上面方式设置为<code>kafkaListenerContainerFactory</code>，那么在Spring的IOC容器中就只会有这一个Bean，且这个Bean里面包含的ConsumerFactory就是我们自定义的ConsumerFactory；</li><li>假如我们设置不与上面的值相同，例如<code>ourKafkaListenrContainerFactory</code>时，在Spring的IOC容器中就会存在两个Bean：一个是默认的KafkaListenerContainerFactory，它的ConsumerFacotory就是默认的；一个是我们自定义的ourKafkaListerContainerFactory，它的ConsumerFactory就是我们自定义的；</li></ul><blockquote><p>至于为什么需要手动注入一个ConsumerFactory类型的Bean，是因为我们在application.yml文件中其实没有办法给Consumer配置拦截器，所以需要手动配置一个来覆盖它默认的ConsumerFactory的相关属性。</p></blockquote><p>3️⃣在消费者消费的时候配置它的containerFactory属性，配置为值为KafkaListenerContainerFactory类型的Bean的名称即可。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line">    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token string">&quot;hello-topic-2&quot;</span><span class="token punctuation">,</span> groupId <span class="token operator">=</span> <span class="token string">&quot;helloGroup&quot;</span><span class="token punctuation">,</span>containerFactory <span class="token operator">=</span> <span class="token string">&quot;ourKafkaListenerContainerFactory&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ConsumerRecord</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> records<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Consumer接受到消息的数量：&quot;</span> <span class="token operator">+</span> records<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在这里的配置也是有讲究的：</p><ul><li>如果在第二步骤中设置监听器容器工厂的Bean的名称为：kafkaListenerContainerFacotry，那么第三步中配置containerFactory属性可以省略，但是所有的Consumer都会使用我们自定义的配置，也就是我们的监听器对所有的Consumer生效；</li><li>如果在第二步骤中设置监听器容器工厂的Bean的名称为：ourKafkaListenerContainerFactory，那么第三步中配置的containerFactory属性不能省略，且我们的自定义配置只对配置了该属性的Consumer生效。</li></ul><p>总结下来就是两点：</p><ol><li>我们配置监听器的话不仅需要覆盖默认的ConsumerFactory类型的Bean，还需要配置一个KafkaListenerContainerFactory类型的Bean；</li><li>如果我们的自定义配置需要对所有的Consumer都生效，我们可以覆盖默认的KafkaListenerContainerFactory；如果我们自定义配置只需要对部分的Consumer生效，则不能覆盖掉KafkaListenerContainerFactory，且在需要的Consumer上必须配置containerFactory属性并指向这个监听器容器工厂Bean。</li></ol><h4 id="消息转发" tabindex="-1"><a class="header-anchor" href="#消息转发"><span>消息转发</span></a></h4><p>消息转发就是应用A从TopicA中接受到消息，经过处理后转到TopicB，再有应用B监听接受到该消息。即一个应用处理完成后将该消息转发至其他应用处理。</p><p>1️⃣在消费者的配置中使用<code>@SendTo</code>注解将该方法返回值发送到其它的Topic，支持指定多个；</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line">    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token string">&quot;hello-topic-2&quot;</span><span class="token punctuation">,</span> groupId <span class="token operator">=</span> <span class="token string">&quot;helloGroup&quot;</span><span class="token punctuation">,</span> containerFactory <span class="token operator">=</span> <span class="token string">&quot;ourKafkaListenerContainerFactory&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token annotation punctuation">@SendTo</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;hello-topic-1&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> records<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;Consumer1接受到消息：&quot;</span> <span class="token operator">+</span> records<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> <span class="token string">&quot;转发后的消息&quot;</span><span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>直接启动是会报错的：a KafkaTemplate is required to support replies</p></blockquote><p>这是因为我们并没有在<code>ourKafkaListenerContainerFactory</code>这个Bean中指定用于发送消息的KafkaTemplate实例。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line">    <span class="token annotation punctuation">@Bean</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">KafkaListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">&gt;</span></span> <span class="token function">ourKafkaListenerContainerFactory</span><span class="token punctuation">(</span><span class="token class-name">ConsumerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> consumerFactory<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">ConcurrentKafkaListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> listenerContainerFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcurrentKafkaListenerContainerFactory</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        listenerContainerFactory<span class="token punctuation">.</span><span class="token function">setConsumerFactory</span><span class="token punctuation">(</span>consumerFactory<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 设置用于回复消息的kafkaTemplate实例</span></span>
<span class="line">        listenerContainerFactory<span class="token punctuation">.</span><span class="token function">setReplyTemplate</span><span class="token punctuation">(</span><span class="token function">kafkaTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> listenerContainerFactory<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>💣<span alt="wavy">即使我们不配置消费者的containerFactory属性，仍然会出现这个报错，是因为默认的KafkaListenerContainerFactory也没有这个配置项</span>。</p><p>总结：</p><ol><li>要使用消息转发必须自定义KafkaListenerContainerFactory，若覆盖了默认的Bean，则所有的Consumer都生效；若不覆盖，只有配置了containerFactory属性的Consumer生效；</li><li>设置KafakListenerContainerFactory的时候必须要设置用于回复消息的KafkaTemplate实例。</li></ol><h3 id="消费者的分区分配策略" tabindex="-1"><a class="header-anchor" href="#消费者的分区分配策略"><span>消费者的分区分配策略</span></a></h3><p>消费者的分区分配策略与生产者的分区策略是不同的，在生产者我们分区策略是指为每个消息分配一个分区。而在消费者中，<span alt="solid">是在发生再均衡时，消费者组内的消费者对于同一个主题的分区分配策略，即哪些消费者消费那些分区的消息</span>。在Kafak中提供了<code>ConsumerPartitionAssignor</code>类作为消费者分区分配策略的顶级父类。它的UML图如下图所示：</p><p><img src="https://typora-panhao.oss-cn-hangzhou.aliyuncs.com/image-20250413145303373.png" alt="image-20250413145303373"></p><p>由上图所示，它一共是有4中分区策略。</p><ul><li><code>RangeAssignor</code> —— 范围分区分配策略（<em>默认分区分配策略</em>）；</li><li><code>RoundAssignor</code> —— 轮询分区分配策略；</li><li><code>CooperativeStickyAssignor</code> —— 黏性分区分配策略；</li><li><code>StickyAssignor</code> —— 黏性分区分配策略；</li></ul><h4 id="指定消费者分区策略" tabindex="-1"><a class="header-anchor" href="#指定消费者分区策略"><span>指定消费者分区策略</span></a></h4><p>在Spring-Kafka中不支持在配置文件中配置消费者的分区分配策略，所以只能通过配置类的方式来配置。</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line">    <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> <span class="token function">consumerConfigs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span><span class="token constant">BOOTSTRAP_SERVERS_CONFIG</span><span class="token punctuation">,</span> bootstrapServers<span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span><span class="token constant">KEY_DESERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span><span class="token constant">VALUE_DESERIALIZER_CLASS_CONFIG</span><span class="token punctuation">,</span> <span class="token string">&quot;org.apache.kafka.common.serialization.StringDeserializer&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span><span class="token constant">MAX_POLL_RECORDS_CONFIG</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 设置拦截器</span></span>
<span class="line"><span class="token comment">//        map.put(ConsumerConfig.INTERCEPTOR_CLASSES_CONFIG, CustomConsumerInterceptor.class.getName());</span></span>
<span class="line">        <span class="token comment">// 设置分区策略</span></span>
<span class="line">        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span><span class="token constant">PARTITION_ASSIGNMENT_STRATEGY_CONFIG</span><span class="token punctuation">,</span> <span class="token class-name">RoundRobinAssignor</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">return</span> map<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在配置ConsumerConfigs的时候添加上<code>partition.assignment.strategy</code>属性的值即可。</p><h4 id="范围分区分配策略" tabindex="-1"><a class="header-anchor" href="#范围分区分配策略"><span>范围分区分配策略</span></a></h4><p>假设一个主题有10个分区(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">P_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.13889em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">0</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>9</mn></msub></mrow><annotation encoding="application/x-tex">P_9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.13889em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">9</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>)，一个消费者组内有3个消费者(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>C</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">C_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.07153em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>C</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">C_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.07153em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>):</p><ol><li>计算每个消费者应得分区数量，用分区数量除以消费者数量：<span class="katex"><span class="katex-mathml"><math><semantics><mrow><mi>P</mi><mo>=</mo><mfrac><mrow><msub><mi>P</mi><mrow><mi>s</mi><mi>u</mi><mi>m</mi></mrow></msub></mrow><mrow><msub><mi>C</mi><mrow><mi>s</mi><mi>u</mi><mi>n</mi></mrow></msub></mrow></mfrac></mrow><annotation encoding="application/x-tex">P = \\frac{P_{sum}}{C_{sun}}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.8933309999999999em;"></span><span class="strut bottom" style="height:1.3433309999999998em;vertical-align:-0.44999999999999996em;"></span><span class="base textstyle uncramped"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="mrel">=</span><span class="mord reset-textstyle textstyle uncramped"><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span><span class="mfrac"><span class="vlist"><span style="top:0.345em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord scriptstyle cramped"><span class="mord"><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:-0.07153em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit">s</span><span class="mord mathit">u</span><span class="mord mathit">n</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span style="top:-0.22999999999999998em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle textstyle uncramped frac-line"></span></span><span style="top:-0.4149999999999999em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle uncramped"><span class="mord scriptstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="vlist"><span style="top:0.15em;margin-right:0.07142857142857144em;margin-left:-0.13889em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-scriptstyle scriptscriptstyle cramped"><span class="mord scriptscriptstyle cramped"><span class="mord mathit">s</span><span class="mord mathit">u</span><span class="mord mathit">m</span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span><span class="sizing reset-size5 size5 reset-textstyle textstyle uncramped nulldelimiter"></span></span></span></span></span></li><li>将余数按照顺序的方式依次分配给每个消费者组</li></ol><p>则按照范围分区分配策略，每个消费者应得3个分区，且还余下一个分区，按照顺序Consumer1将获得4个分区的所有权。所以每个消费者分配到的分区如下所示：</p><p>1️⃣Consumer1将获取分区：0,1,2,3；</p><p>2️⃣Consumer2将获取分区：4,5,6；</p><p>3️⃣Consumer3将获取分区：7,8,9;</p><h4 id="轮询分区分配策略" tabindex="-1"><a class="header-anchor" href="#轮询分区分配策略"><span>轮询分区分配策略</span></a></h4><p>假设一个主题有10个分区(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">P_0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.13889em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">0</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>P</mi><mn>9</mn></msub></mrow><annotation encoding="application/x-tex">P_9</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.13889em;">P</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.13889em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">9</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>)，一个消费者组内有3个消费者(<span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>C</mi><mn>1</mn></msub></mrow><annotation encoding="application/x-tex">C_1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.07153em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">1</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span> ~ <span class="katex"><span class="katex-mathml"><math><semantics><mrow><msub><mi>C</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">C_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="strut" style="height:0.68333em;"></span><span class="strut bottom" style="height:0.83333em;vertical-align:-0.15em;"></span><span class="base textstyle uncramped"><span class="mord"><span class="mord mathit" style="margin-right:0.07153em;">C</span><span class="vlist"><span style="top:0.15em;margin-right:0.05em;margin-left:-0.07153em;"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span><span class="reset-textstyle scriptstyle cramped"><span class="mord mathrm">2</span></span></span><span class="baseline-fix"><span class="fontsize-ensurer reset-size5 size5"><span style="font-size:0em;">​</span></span>​</span></span></span></span></span></span>):</p><ol><li>按照顺序将分区分配给每个消费者</li></ol><p>按照轮询分区分配的策略，每个消费者分配到的分区如下所示：</p><p>1️⃣Consumer1将获取分区：0,3,6,9</p><p>2️⃣Consumer2将获取分区：1,4,7</p><p>3️⃣Consumer3将获取分区：2,5,8</p><h4 id="黏性分区分配策略" tabindex="-1"><a class="header-anchor" href="#黏性分区分配策略"><span>黏性分区分配策略</span></a></h4><p>StickyAssignor与CooperativeStickyAssinor两种分区策略都是黏性分区策略。而黏性分区策略的意思是指：</p><ol><li>尽可能保证消费者与分区之间的关系不发生变化，即使消费者组内的成员发生了变化，减少不必要的分区重分配；</li><li>尽量保持现有的分区分配不变，仅对新加入的消费者或离开的消费者进行分区调整</li></ol><p>按照上述的策略：大多数的消费者可以继续消费它们之前的分区，只有少数的消费者需要处理额外的分区，所以称之为黏性分区策略。</p><p>与StickyAssignor相比，CooperativeStickyAssignor分区策略，增加了对协作式重新平衡的支持，即消费者可以在它离开消费者组之前通知协调器，以便协调器可以预先计划分区迁移，而不是在消费者突然离开时立即进行分区重新分配。</p><h2 id="kafka消息的存储" tabindex="-1"><a class="header-anchor" href="#kafka消息的存储"><span>Kafka消息的存储</span></a></h2><p><span alt="solid">Kafka所有的消息都是存储在<code>/tmp/kafka-logs</code></span>目录下，可以通过<code>log.dirs</code>配置项进行修改。Kafka中所有的消息都是以事件的方式来保存的。</p><p>为了避免日志文件过大， 日志文件被存放在多个目录下，日志目录的命名规则为：<code>&lt;topic_name&gt;-&lt;partition_id&gt;</code>。例如helloTopic主题有三个分区，那么就会在/tmp/kafka-logs目录下创建三个文件夹，helloTopic-0，hello-topic-1和hello-topic-2。</p><p>在每个目录下面还会有多个文件：</p><p><img src="https://typora-panhao.oss-cn-hangzhou.aliyuncs.com/image-20250417194351479.png" alt="image-20250417194351479"></p><p>其中：</p><ul><li>00000000000000000000.index —— 该文件存储消息的索引信息</li><li>00000000000000000000.log —— 该文件存储消息</li><li>00000000000000000000.timeindex —— 该文件存储消息的时间戳索引</li><li>00000000000000000000.snapshot —— 快照文件，生产者在发生故障或重启时恢复并继续之前的操作（<em>并不是所有的分区都有这个文件</em>）</li><li>leader-epoch-checkpoint —— 记录每个分区当前领导者的epoch以及领导者开始写入消息时的起始偏移量；</li><li>partition.metadata —— 存储关于特定分区的元数据信息</li></ul><h3 id="消息的offset的存储" tabindex="-1"><a class="header-anchor" href="#消息的offset的存储"><span>消息的Offset的存储</span></a></h3><p>在/tmp/kafka-logs文件下存在<code>__conusmer_offset-0</code> ~ <code>__consumer_offset-49</code>一共59个文件夹，它是用来存储每个消费者消费Topic的情况。</p><p>当有一个消费者消费了一条消息时，它会向Kafka提交一个offset，而它提交的offset信息就会被保存在__Counser_offset主题中，至于会保存在哪个分区中，则遵循下面的计算方式：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">abs</span><span class="token punctuation">(</span><span class="token string">&quot;groupId&quot;</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span> topicMetadataPartitionCount<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>使用groupId的hashCode值对__Consumer_offset主题的分区数量（<em>默认分区数量为50</em>）进行取模。</p><h4 id="生产者的offset" tabindex="-1"><a class="header-anchor" href="#生产者的offset"><span>生产者的Offset</span></a></h4><p>生产者发送一条消息到Kafka的Broker的某个Topic下的某个Partition中，Kafka内部会为这个消息分配一个唯一的offset（<em>分区内唯一</em>），该offset就是该消息在这个Partition中的位置。</p><blockquote><p>生产者的offset不需要再编码中进行管理，由Kafka自动生成；</p></blockquote><h4 id="消费者的offset" tabindex="-1"><a class="header-anchor" href="#消费者的offset"><span>消费者的Offset</span></a></h4><p>消费者offset是指消费者已经读取到了哪个位置，接下来需要从哪个位置开始读取消息；</p><blockquote><p>offset表示下一次要读取的消息的offset</p></blockquote><p><span alt="solid">每个消费者组中的消费者都会独立地维护自己的offset</span>，当消费者从某个Partition中读取消息时，它会记录当前读取到的offset，这样即使消费者崩溃或者重启，它也可以从上次读取的位置继续读取，而不会重复读取或者遗漏消息。</p>`,73)),p(a,{title:"red"},{default:e(()=>s[3]||(s[3]=[t("只有消费者提交了offset才会被Kafka记录")])),_:1}),s[8]||(s[8]=n(`，如果消费者消费了消息但是没有提交offset，那么这条消息将会被重复消费；如果消费者还没有消费消息就提交了offset，那么这条消息将无法被消费；<p>消费者的消费情况可以通过下面的方式来进行查询：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token punctuation">.</span>/kafka<span class="token operator">-</span>consumer<span class="token operator">-</span>group<span class="token punctuation">.</span>sh <span class="token operator">--</span>bootstrap<span class="token operator">-</span>server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">9092</span> <span class="token operator">--</span>group myGroup <span class="token operator">--</span>describe</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>运行上述的命令后，将得到下面的消息：</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line"><span class="token punctuation">[</span>root<span class="token annotation punctuation">@VM</span><span class="token operator">-</span><span class="token number">4</span><span class="token operator">-</span><span class="token number">14</span><span class="token operator">-</span>centos bin<span class="token punctuation">]</span># <span class="token punctuation">.</span>/kafka<span class="token operator">-</span>consumer<span class="token operator">-</span>groups<span class="token punctuation">.</span>sh  <span class="token operator">--</span>bootstrap<span class="token operator">-</span>server <span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token operator">:</span><span class="token number">9092</span> <span class="token operator">--</span>group myGroup <span class="token operator">--</span>describe</span>
<span class="line"><span class="token class-name">Consumer</span> group &#39;myGroup&#39; has no active members<span class="token punctuation">.</span></span>
<span class="line"><span class="token constant">GROUP</span>           <span class="token constant">TOPIC</span>           <span class="token constant">PARTITION</span>  <span class="token constant">CURRENT</span><span class="token operator">-</span><span class="token constant">OFFSET</span>  <span class="token constant">LOG</span><span class="token operator">-</span><span class="token constant">END</span><span class="token operator">-</span><span class="token constant">OFFSET</span>  <span class="token constant">LAG</span>             <span class="token constant">CONSUMER</span><span class="token operator">-</span><span class="token constant">ID</span>     <span class="token constant">HOST</span>            <span class="token constant">CLIENT</span><span class="token operator">-</span><span class="token constant">ID</span></span>
<span class="line">myGroup         myTopic         <span class="token number">4</span>          <span class="token number">0</span>               <span class="token number">8</span>               <span class="token number">8</span>               <span class="token operator">-</span>               <span class="token operator">-</span>               <span class="token operator">-</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>其中每个属性的含义如下：</p><ul><li>group —— 表示消费者组的名称</li><li>topic —— 表示主题的名称</li><li>parition —— 表示分区的ID</li><li>current-offset —— 表示消费到的offset</li><li>log-end-offset —— 表示最大的offset</li><li>lag —— 表示还有多少条消息可以被消费</li><li>consumer-id —— 表示消费这个分区的消费者的ID</li></ul><h4 id="手动提交offset" tabindex="-1"><a class="header-anchor" href="#手动提交offset"><span>手动提交offset</span></a></h4><p>在Kafka中，默认情况下，消费者是自动提交offset的，但是在某些业务场景下，手动提交offset能更好低满足需求。</p><ol><li><p>确保消息处理的精确一次语义</p><p>需要保证每条消息仅被处理一次，例如金融系统的扣款等消息；</p></li><li><p>批量消息处理</p><p>消费者需要批量消费消息时，自动提交时按照一定的间隔来提交offset，有可能提交的时候改批次的消息只消费了一半，导致部分消息消费失败了也无法处理这些消息；</p></li><li><p>消息处理顺序控制</p><p>例如在订单消息中需要按照订单产生的时间来处理，自动提交offset可能会导致消息的顺序被打乱了；</p></li><li><p>异常处理和重试机制</p><p>当消息处理的过程中出现了异常，自动提交offset会导致Kafka认为该消息已经被成功处理，不会再次发送该消息；</p></li></ol><p>如何实现自动提交？</p><p>1️⃣设置ack的模式为手动提交</p><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties"><pre><code><span class="line"><span class="token key attr-name">spring.kafka.listener.ack-model</span><span class="token punctuation">=</span><span class="token value attr-value">manual</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>2️⃣关闭自动提交</p><div class="language-properties line-numbers-mode" data-highlighter="prismjs" data-ext="properties"><pre><code><span class="line"><span class="token key attr-name">spring.kafka.consumer.enable-auto-commit</span> <span class="token punctuation">=</span> <span class="token value attr-value">fasle</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>3️⃣消费者手动提交Ack</p><div class="language-java line-numbers-mode" data-highlighter="prismjs" data-ext="java"><pre><code><span class="line">    <span class="token annotation punctuation">@KafkaListener</span><span class="token punctuation">(</span>topics <span class="token operator">=</span> <span class="token string">&quot;myTopic&quot;</span><span class="token punctuation">,</span> groupId <span class="token operator">=</span> <span class="token string">&quot;myGroup&quot;</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onMessage</span><span class="token punctuation">(</span><span class="token class-name">ConsumerRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> record<span class="token punctuation">,</span> <span class="token class-name">Acknowledgment</span> ack<span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;==========&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; offset测试 接受到消息的offset：{}&quot;</span><span class="token punctuation">,</span> record<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token comment">// 模拟消息消费失败</span></span>
<span class="line">        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span></span>
<span class="line">            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">&quot;==========&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; offset测试 消息消费失败 offset：{}&quot;</span><span class="token punctuation">,</span> record<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            ack<span class="token punctuation">.</span><span class="token function">nack</span><span class="token punctuation">(</span><span class="token class-name">Duration</span><span class="token punctuation">.</span><span class="token function">ofSeconds</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span></span>
<span class="line">            ack<span class="token punctuation">.</span><span class="token function">acknowledge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">&quot;==========&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; offset测试 消息消费成功 offset：{}&quot;</span><span class="token punctuation">,</span> record<span class="token punctuation">.</span><span class="token function">offset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span>
<span class="line">        <span class="token punctuation">}</span></span>
<span class="line">    <span class="token punctuation">}</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17))])}const m=o(u,[["render",r]]),v=JSON.parse('{"path":"/posts/%E6%B6%88%E6%81%AF%E4%B8%AD%E9%97%B4%E4%BB%B6/Kafka%E7%B2%BE%E8%AE%B2.html","title":"Kafka精讲","lang":"zh-CN","frontmatter":{"date":"2025-05-09T00:00:00.000Z","category":["消息中间件"],"tag":["Kafka"],"archive":false},"headers":[{"level":2,"title":"什么是Kafak","slug":"什么是kafak","link":"#什么是kafak","children":[{"level":3,"title":"Kafak的起源","slug":"kafak的起源","link":"#kafak的起源","children":[]},{"level":3,"title":"Kafak的发展历程","slug":"kafak的发展历程","link":"#kafak的发展历程","children":[]}]},{"level":2,"title":"Kafka运行环境的前置要求","slug":"kafka运行环境的前置要求","link":"#kafka运行环境的前置要求","children":[{"level":3,"title":"使用KRaft的方式安装Kafka","slug":"使用kraft的方式安装kafka","link":"#使用kraft的方式安装kafka","children":[]},{"level":3,"title":"Docker安装Kafka","slug":"docker安装kafka","link":"#docker安装kafka","children":[]}]},{"level":2,"title":"Kafka的简单操作","slug":"kafka的简单操作","link":"#kafka的简单操作","children":[{"level":3,"title":"Kafka主题操作","slug":"kafka主题操作","link":"#kafka主题操作","children":[]},{"level":3,"title":"Kafka操作消息","slug":"kafka操作消息","link":"#kafka操作消息","children":[]}]},{"level":2,"title":"安装使用Kafka-Egle监控软件","slug":"安装使用kafka-egle监控软件","link":"#安装使用kafka-egle监控软件","children":[]},{"level":2,"title":"SpringBoot集成Kafka","slug":"springboot集成kafka","link":"#springboot集成kafka","children":[{"level":3,"title":"引入依赖","slug":"引入依赖","link":"#引入依赖","children":[]},{"level":3,"title":"生产者和消费者配置","slug":"生产者和消费者配置","link":"#生产者和消费者配置","children":[]},{"level":3,"title":"Kafka核心概念","slug":"kafka核心概念","link":"#kafka核心概念","children":[]}]},{"level":2,"title":"Kafka进阶使用","slug":"kafka进阶使用","link":"#kafka进阶使用","children":[{"level":3,"title":"消费者从头开始消费","slug":"消费者从头开始消费","link":"#消费者从头开始消费","children":[]},{"level":3,"title":"生产者发送消息的方式","slug":"生产者发送消息的方式","link":"#生产者发送消息的方式","children":[]},{"level":3,"title":"创建主题并且指定它的分区数量","slug":"创建主题并且指定它的分区数量","link":"#创建主题并且指定它的分区数量","children":[]},{"level":3,"title":"生产者发送消息的分区策略","slug":"生产者发送消息的分区策略","link":"#生产者发送消息的分区策略","children":[]},{"level":3,"title":"拦截器","slug":"拦截器","link":"#拦截器","children":[]},{"level":3,"title":"消费者消费消息的配置","slug":"消费者消费消息的配置","link":"#消费者消费消息的配置","children":[]},{"level":3,"title":"消费者的分区分配策略","slug":"消费者的分区分配策略","link":"#消费者的分区分配策略","children":[]}]},{"level":2,"title":"Kafka消息的存储","slug":"kafka消息的存储","link":"#kafka消息的存储","children":[{"level":3,"title":"消息的Offset的存储","slug":"消息的offset的存储","link":"#消息的offset的存储","children":[]}]}],"git":{},"filePathRelative":"posts/消息中间件/Kafka精讲.md","excerpt":"\\n<h2>什么是Kafak</h2>\\n<p>Apache Kafak是一个开源分布式事件流平台，被数千家公司用于高性能数据管道、流分析、数据集成和关键任务应用程序。</p>\\n"}');export{m as comp,v as data};
